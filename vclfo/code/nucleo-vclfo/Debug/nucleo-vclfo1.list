
nucleo-vclfo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d88  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a028  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff44  0800ff44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff44  0800ff44  0001ff44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff4c  0800ff4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff4c  0800ff4c  0001ff4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff50  0800ff50  0001ff50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ff54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000074  0800ffc8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  0800ffc8  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131e2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f45  00000000  00000000  00033286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  000361d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00037268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018453  00000000  00000000  00038198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c1  00000000  00000000  000505eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a585  00000000  00000000  000658ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ffe31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043fc  00000000  00000000  000ffe84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005f04 	.word	0x08005f04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08005f04 	.word	0x08005f04

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004e0:	4a22      	ldr	r2, [pc, #136]	; (800056c <MX_ADC1_Init+0xa0>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80004e4:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80004ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ec:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_ADC1_Init+0x9c>)
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_ADC1_Init+0x9c>)
 8000508:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_ADC1_Init+0x9c>)
 8000510:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_ADC1_Init+0x9c>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_ADC1_Init+0x9c>)
 800051e:	2201      	movs	r2, #1
 8000520:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_ADC1_Init+0x9c>)
 8000524:	2200      	movs	r2, #0
 8000526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_ADC1_Init+0x9c>)
 800052c:	2201      	movs	r2, #1
 800052e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <MX_ADC1_Init+0x9c>)
 8000532:	f001 f83b 	bl	80015ac <HAL_ADC_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800053c:	f000 f9d6 	bl	80008ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000540:	2300      	movs	r3, #0
 8000542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000544:	2301      	movs	r3, #1
 8000546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_ADC1_Init+0x9c>)
 8000552:	f001 f973 	bl	800183c <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800055c:	f000 f9c6 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000094 	.word	0x20000094
 800056c:	40012000 	.word	0x40012000

08000570 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a2e      	ldr	r2, [pc, #184]	; (8000648 <HAL_ADC_MspInit+0xd8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d156      	bne.n	8000640 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b2d      	ldr	r3, [pc, #180]	; (800064c <HAL_ADC_MspInit+0xdc>)
 8000598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059a:	4a2c      	ldr	r2, [pc, #176]	; (800064c <HAL_ADC_MspInit+0xdc>)
 800059c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a0:	6453      	str	r3, [r2, #68]	; 0x44
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <HAL_ADC_MspInit+0xdc>)
 80005a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <HAL_ADC_MspInit+0xdc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a25      	ldr	r2, [pc, #148]	; (800064c <HAL_ADC_MspInit+0xdc>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <HAL_ADC_MspInit+0xdc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ca:	2301      	movs	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	481c      	ldr	r0, [pc, #112]	; (8000650 <HAL_ADC_MspInit+0xe0>)
 80005de:	f003 fa11 	bl	8003a04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 80005e4:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <HAL_ADC_MspInit+0xe8>)
 80005e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 8000602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000606:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 800060a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800060e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 8000612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000616:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 8000626:	f001 fcbb 	bl	8001fa0 <HAL_DMA_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000630:	f000 f95c 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 8000638:	639a      	str	r2, [r3, #56]	; 0x38
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <HAL_ADC_MspInit+0xe4>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40012000 	.word	0x40012000
 800064c:	40023800 	.word	0x40023800
 8000650:	40020000 	.word	0x40020000
 8000654:	200000dc 	.word	0x200000dc
 8000658:	40026410 	.word	0x40026410

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_DMA_Init+0x4c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_DMA_Init+0x4c>)
 800066c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_DMA_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	2038      	movs	r0, #56	; 0x38
 8000684:	f001 fc55 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000688:	2038      	movs	r0, #56	; 0x38
 800068a:	f001 fc6e 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2045      	movs	r0, #69	; 0x45
 8000694:	f001 fc4d 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000698:	2045      	movs	r0, #69	; 0x45
 800069a:	f001 fc66 	bl	8001f6a <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a2c      	ldr	r2, [pc, #176]	; (800077c <MX_GPIO_Init+0xd0>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a25      	ldr	r2, [pc, #148]	; (800077c <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a1e      	ldr	r2, [pc, #120]	; (800077c <MX_GPIO_Init+0xd0>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a17      	ldr	r2, [pc, #92]	; (800077c <MX_GPIO_Init+0xd0>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2130      	movs	r1, #48	; 0x30
 8000736:	4812      	ldr	r0, [pc, #72]	; (8000780 <MX_GPIO_Init+0xd4>)
 8000738:	f003 fae8 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800073c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_GPIO_Init+0xd8>)
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_GPIO_Init+0xdc>)
 8000752:	f003 f957 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000756:	2330      	movs	r3, #48	; 0x30
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xd4>)
 800076e:	f003 f949 	bl	8003a04 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000
 8000784:	10210000 	.word	0x10210000
 8000788:	40020800 	.word	0x40020800

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 fe99 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f83d 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f7ff ff87 	bl	80006ac <MX_GPIO_Init>
  MX_DMA_Init();
 800079e:	f7ff ff5d 	bl	800065c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007a2:	f000 fbbb 	bl	8000f1c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80007a6:	f000 f8a7 	bl	80008f8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80007aa:	f000 f9bb 	bl	8000b24 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007ae:	f000 fa8f 	bl	8000cd0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80007b2:	f7ff fe8b 	bl	80004cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ADC_Init(&htim3, &hadc1);
 80007b6:	4911      	ldr	r1, [pc, #68]	; (80007fc <main+0x70>)
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <main+0x74>)
 80007ba:	f005 f99b 	bl	8005af4 <ADC_Init>
  DAC_Init(&htim1, &hspi2, &hdma_tim1_ch1_ch2_ch3);
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <main+0x78>)
 80007c0:	4911      	ldr	r1, [pc, #68]	; (8000808 <main+0x7c>)
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <main+0x80>)
 80007c4:	f005 f9c8 	bl	8005b58 <DAC_Init>

  CV_inputs cv;
  cv.f = 440;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <main+0x84>)
 80007ca:	603b      	str	r3, [r7, #0]
  cv.wave_idx = 0;
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t need_more_samples = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]

  while (1)
  {
    if (need_more_samples) {
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00a      	beq.n	80007f2 <main+0x66>

    // todo: pull out CV from buffers and input into wt_sample
    float smpl = wt_sample(&cv);
 80007dc:	463b      	mov	r3, r7
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fce6 	bl	80011b0 <wt_sample>
 80007e4:	ed87 0a02 	vstr	s0, [r7, #8]
    DAC_queue_push(smpl);
 80007e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80007ec:	f005 fa34 	bl	8005c58 <DAC_queue_push>
 80007f0:	e7f1      	b.n	80007d6 <main+0x4a>
    //  float adc_f = ((float) adc - 2047) / 2048;	// convert adc to range [-1,1]
  	// DAC_queue_push(adc_f);
    } else {
      /* TODO: prepare CV inputs for next sequence */ 

      uint16_t adc = ADC_queue_pop();
 80007f2:	f005 f99b 	bl	8005b2c <ADC_queue_pop>
 80007f6:	4603      	mov	r3, r0
 80007f8:	81bb      	strh	r3, [r7, #12]
    if (need_more_samples) {
 80007fa:	e7ec      	b.n	80007d6 <main+0x4a>
 80007fc:	20000094 	.word	0x20000094
 8000800:	20000194 	.word	0x20000194
 8000804:	200001dc 	.word	0x200001dc
 8000808:	2000013c 	.word	0x2000013c
 800080c:	2000023c 	.word	0x2000023c
 8000810:	43dc0000 	.word	0x43dc0000

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 fab8 	bl	8005d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <SystemClock_Config+0xd0>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <SystemClock_Config+0xd0>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <SystemClock_Config+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <SystemClock_Config+0xd4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <SystemClock_Config+0xd4>)
 8000862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <SystemClock_Config+0xd4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000888:	2310      	movs	r3, #16
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 800088c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000892:	2304      	movs	r3, #4
 8000894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000896:	2307      	movs	r3, #7
 8000898:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fa4e 	bl	8003d40 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008aa:	f000 f81f 	bl	80008ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2102      	movs	r1, #2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fcb0 	bl	8004230 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008d6:	f000 f809 	bl	80008ec <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	; 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_SPI2_Init+0x64>)
 80008fe:	4a18      	ldr	r2, [pc, #96]	; (8000960 <MX_SPI2_Init+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_SPI2_Init+0x64>)
 8000904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000908:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_SPI2_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_SPI2_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_SPI2_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_SPI2_Init+0x64>)
 800091e:	2201      	movs	r2, #1
 8000920:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_SPI2_Init+0x64>)
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI2_Init+0x64>)
 800092c:	2220      	movs	r2, #32
 800092e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_SPI2_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI2_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_SPI2_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI2_Init+0x64>)
 8000944:	220a      	movs	r2, #10
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_SPI2_Init+0x64>)
 800094a:	f003 fe6d 	bl	8004628 <HAL_SPI_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000954:	f7ff ffca 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000013c 	.word	0x2000013c
 8000960:	40003800 	.word	0x40003800

08000964 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <HAL_SPI_MspInit+0xc0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d14a      	bne.n	8000a1c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <HAL_SPI_MspInit+0xc4>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <HAL_SPI_MspInit+0xc4>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_SPI_MspInit+0xc4>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_SPI_MspInit+0xc4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <HAL_SPI_MspInit+0xc4>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_SPI_MspInit+0xc4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_SPI_MspInit+0xc4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <HAL_SPI_MspInit+0xc4>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_SPI_MspInit+0xc4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009da:	2308      	movs	r3, #8
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ea:	2305      	movs	r3, #5
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <HAL_SPI_MspInit+0xc8>)
 80009f6:	f003 f805 	bl	8003a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <HAL_SPI_MspInit+0xcc>)
 8000a18:	f002 fff4 	bl	8003a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40003800 	.word	0x40003800
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020400 	.word	0x40020400

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a72:	2007      	movs	r0, #7
 8000a74:	f001 fa52 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad0:	f000 fd4c 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <DMA2_Stream0_IRQHandler+0x10>)
 8000ade:	f001 fb65 	bl	80021ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000dc 	.word	0x200000dc

08000aec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <DMA2_Stream6_IRQHandler+0x10>)
 8000af2:	f001 fb5b 	bl	80021ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200001dc 	.word	0x200001dc

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim1_ch1_ch2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b096      	sub	sp, #88	; 0x58
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2220      	movs	r2, #32
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f005 f91b 	bl	8005d98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b62:	4b59      	ldr	r3, [pc, #356]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000b64:	4a59      	ldr	r2, [pc, #356]	; (8000ccc <MX_TIM1_Init+0x1a8>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8000b68:	4b57      	ldr	r3, [pc, #348]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6e:	4b56      	ldr	r3, [pc, #344]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000b74:	4b54      	ldr	r3, [pc, #336]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000b76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b52      	ldr	r3, [pc, #328]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b82:	4b51      	ldr	r3, [pc, #324]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8e:	484e      	ldr	r0, [pc, #312]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000b90:	f003 fdd3 	bl	800473a <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b9a:	f7ff fea7 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4847      	ldr	r0, [pc, #284]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000bac:	f004 f8e8 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bb6:	f7ff fe99 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000bba:	4843      	ldr	r0, [pc, #268]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000bbc:	f003 fe66 	bl	800488c <HAL_TIM_OC_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bc6:	f7ff fe91 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bca:	483f      	ldr	r0, [pc, #252]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000bcc:	f003 ff68 	bl	8004aa0 <HAL_TIM_PWM_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000bd6:	f7ff fe89 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be6:	4619      	mov	r1, r3
 8000be8:	4837      	ldr	r0, [pc, #220]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000bea:	f004 fcad 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000bf4:	f7ff fe7a 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	482a      	ldr	r0, [pc, #168]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000c1e:	f003 ff99 	bl	8004b54 <HAL_TIM_OC_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c28:	f7ff fe60 	bl	80008ec <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	2204      	movs	r2, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4823      	ldr	r0, [pc, #140]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000c3a:	f003 ff8b 	bl	8004b54 <HAL_TIM_OC_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000c44:	f7ff fe52 	bl	80008ec <Error_Handler>
  }
  sConfigOC.Pulse = 350;
 8000c48:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	2208      	movs	r2, #8
 8000c54:	4619      	mov	r1, r3
 8000c56:	481c      	ldr	r0, [pc, #112]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000c58:	f003 ff7c 	bl	8004b54 <HAL_TIM_OC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c62:	f7ff fe43 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c66:	2370      	movs	r3, #112	; 0x70
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 950;
 8000c6a:	f240 33b6 	movw	r3, #950	; 0x3b6
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	220c      	movs	r2, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000c7a:	f003 ffc3 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000c84:	f7ff fe32 	bl	80008ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000cac:	f004 fcba 	bl	8005624 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x196>
  {
    Error_Handler();
 8000cb6:	f7ff fe19 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <MX_TIM1_Init+0x1a4>)
 8000cbc:	f000 f8f4 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 8000cc0:	bf00      	nop
 8000cc2:	3758      	adds	r7, #88	; 0x58
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000023c 	.word	0x2000023c
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	; 0x38
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d02:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <MX_TIM3_Init+0xec>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d08:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000d0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d26:	4824      	ldr	r0, [pc, #144]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d28:	f003 fd07 	bl	800473a <HAL_TIM_Base_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d32:	f7ff fddb 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d40:	4619      	mov	r1, r3
 8000d42:	481d      	ldr	r0, [pc, #116]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d44:	f004 f81c 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d4e:	f7ff fdcd 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000d52:	4819      	ldr	r0, [pc, #100]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d54:	f003 fd9a 	bl	800488c <HAL_TIM_OC_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d5e:	f7ff fdc5 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d62:	2320      	movs	r3, #32
 8000d64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d72:	f004 fbe9 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d7c:	f7ff fdb6 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000d98:	f003 fedc 	bl	8004b54 <HAL_TIM_OC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000da2:	f7ff fda3 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // configure CC channels and enable TIM3
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000da6:	2100      	movs	r1, #0
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <MX_TIM3_Init+0xe8>)
 8000daa:	f003 fdc9 	bl	8004940 <HAL_TIM_OC_Start>
  // enable DMA for each CC channel
  // __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);

  /* USER CODE END TIM3_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3738      	adds	r7, #56	; 0x38
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000194 	.word	0x20000194
 8000dbc:	40000400 	.word	0x40000400

08000dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a31      	ldr	r2, [pc, #196]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d149      	bne.n	8000e66 <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <HAL_TIM_Base_MspInit+0xd8>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a2f      	ldr	r2, [pc, #188]	; (8000e98 <HAL_TIM_Base_MspInit+0xd8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <HAL_TIM_Base_MspInit+0xd8>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8000dee:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000df0:	4a2b      	ldr	r2, [pc, #172]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000dfc:	2240      	movs	r2, #64	; 0x40
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_CIRCULAR;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e20:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e28:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8000e30:	481a      	ldr	r0, [pc, #104]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e32:	f001 f8b5 	bl	8001fa0 <HAL_DMA_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000e3c:	f7ff fd56 	bl	80008ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e64:	e012      	b.n	8000e8c <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_TIM_Base_MspInit+0xe4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d10d      	bne.n	8000e8c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_TIM_Base_MspInit+0xd8>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_TIM_Base_MspInit+0xd8>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_TIM_Base_MspInit+0xd8>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010000 	.word	0x40010000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	200001dc 	.word	0x200001dc
 8000ea0:	400264a0 	.word	0x400264a0
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <HAL_TIM_MspPostInit+0x68>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d11e      	bne.n	8000f08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_TIM_MspPostInit+0x70>)
 8000f04:	f002 fd7e 	bl	8003a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40010000 	.word	0x40010000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000

08000f1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_USART2_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f004 fbb8 	bl	80056c8 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f7ff fcc5 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000284 	.word	0x20000284
 8000f6c:	40004400 	.word	0x40004400

08000f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <HAL_UART_MspInit+0x84>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d12b      	bne.n	8000fea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fca:	230c      	movs	r3, #12
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_UART_MspInit+0x8c>)
 8000fe6:	f002 fd0d 	bl	8003a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopFillZerobss+0x26>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102a:	f7ff fd69 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f004 fe8f 	bl	8005d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fbab 	bl	800078c <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001038:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001044:	0800ff54 	.word	0x0800ff54
  ldr r2, =_sbss
 8001048:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800104c:	200003f8 	.word	0x200003f8

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>

08001052 <min>:
 */

#ifndef CUSTOM_UTILITY_H_
#define CUSTOM_UTILITY_H_

static inline int min(int a, int b) { return ((a<b)?a:b); }
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4293      	cmp	r3, r2
 8001062:	bfa8      	it	ge
 8001064:	4613      	movge	r3, r2
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <interp>:

static inline int max(int a, int b) { return ((a<b)?b:a); }

static inline float interp(float x1, float x2, float amount) {
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	ed87 0a03 	vstr	s0, [r7, #12]
 800107c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001080:	ed87 1a01 	vstr	s2, [r7, #4]
	return (1-amount) * x1 + amount * x2;
 8001084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001088:	edd7 7a01 	vldr	s15, [r7, #4]
 800108c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001090:	edd7 7a03 	vldr	s15, [r7, #12]
 8001094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001098:	edd7 6a01 	vldr	s13, [r7, #4]
 800109c:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80010a8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <clamp>:

static inline float clamp(float x, float lower, float upper) {
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	ed87 0a03 	vstr	s0, [r7, #12]
 80010c0:	edc7 0a02 	vstr	s1, [r7, #8]
 80010c4:	ed87 1a01 	vstr	s2, [r7, #4]
	return x <= lower ? lower : x >= upper ? upper : x;
 80010c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80010d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d801      	bhi.n	80010de <clamp+0x28>
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	e00b      	b.n	80010f6 <clamp+0x40>
 80010de:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	db01      	blt.n	80010f4 <clamp+0x3e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	e000      	b.n	80010f6 <clamp+0x40>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	ee07 3a90 	vmov	s15, r3
}
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <lerp2pt>:

static inline float lerp2pt(float x0, float y0, float x1, float y1, float k) {
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001112:	edc7 0a04 	vstr	s1, [r7, #16]
 8001116:	ed87 1a03 	vstr	s2, [r7, #12]
 800111a:	edc7 1a02 	vstr	s3, [r7, #8]
 800111e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (y0 * (x1 - k) + y1 * (k - x0)) / (x1 - x0);
 8001122:	ed97 7a03 	vldr	s14, [r7, #12]
 8001126:	edd7 7a01 	vldr	s15, [r7, #4]
 800112a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800112e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001136:	edd7 6a01 	vldr	s13, [r7, #4]
 800113a:	edd7 7a05 	vldr	s15, [r7, #20]
 800113e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001142:	edd7 7a02 	vldr	s15, [r7, #8]
 8001146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001152:	edd7 7a05 	vldr	s15, [r7, #20]
 8001156:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800115a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800115e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <lookup>:
#include "math.h"
#include "utility.h"

static float k;

float lookup(const int wave_idx, const int octave_idx, const int sample_idx) {
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	return wavetable[SMPL_SIZE * ((NUM_OCTAVES * wave_idx) + octave_idx) + sample_idx];
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	461a      	mov	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4413      	add	r3, r2
 800118c:	021a      	lsls	r2, r3, #8
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a06      	ldr	r2, [pc, #24]	; (80011ac <lookup+0x3c>)
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	ee07 3a90 	vmov	s15, r3
}
 800119e:	eeb0 0a67 	vmov.f32	s0, s15
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	08005f34 	.word	0x08005f34

080011b0 <wt_sample>:

float wt_sample(CV_inputs *cv) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b092      	sub	sp, #72	; 0x48
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  k = fmodf(k + (SMPL_SIZE * cv->f / FS), SMPL_SIZE);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80013c0 <wt_sample+0x210>
 80011c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c6:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80013c4 <wt_sample+0x214>
 80011ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011ce:	4b7e      	ldr	r3, [pc, #504]	; (80013c8 <wt_sample+0x218>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	eddf 0a79 	vldr	s1, [pc, #484]	; 80013c0 <wt_sample+0x210>
 80011dc:	eeb0 0a67 	vmov.f32	s0, s15
 80011e0:	f004 fde2 	bl	8005da8 <fmodf>
 80011e4:	eef0 7a40 	vmov.f32	s15, s0
 80011e8:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <wt_sample+0x218>)
 80011ea:	edc3 7a00 	vstr	s15, [r3]

	const float f_clamp = clamp(cv->f, VCO_F_MIN, VCO_F_MAX);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ed9f 1a75 	vldr	s2, [pc, #468]	; 80013cc <wt_sample+0x21c>
 80011f8:	eddf 0a75 	vldr	s1, [pc, #468]	; 80013d0 <wt_sample+0x220>
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	f7ff ff59 	bl	80010b6 <clamp>
 8001204:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

	// quick compute log2(f_clamp / VCO_F_MIN)
	int intlog = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
	int x = (int) f_clamp / VCO_F_MIN;
 800120c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001214:	ee17 1a90 	vmov	r1, s15
 8001218:	4b6e      	ldr	r3, [pc, #440]	; (80013d4 <wt_sample+0x224>)
 800121a:	fb83 2301 	smull	r2, r3, r3, r1
 800121e:	111a      	asrs	r2, r3, #4
 8001220:	17cb      	asrs	r3, r1, #31
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	643b      	str	r3, [r7, #64]	; 0x40
	while (x >>= 1) ++intlog;
 8001226:	e002      	b.n	800122e <wt_sample+0x7e>
 8001228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800122a:	3301      	adds	r3, #1
 800122c:	647b      	str	r3, [r7, #68]	; 0x44
 800122e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001230:	105b      	asrs	r3, r3, #1
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
 8001234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f6      	bne.n	8001228 <wt_sample+0x78>

	const int oct1_idx = intlog + 1;
 800123a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800123c:	3301      	adds	r3, #1
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
	const int oct2_idx = min(oct1_idx + 1, NUM_OCTAVES - 1);
 8001240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001242:	3301      	adds	r3, #1
 8001244:	2109      	movs	r1, #9
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff03 	bl	8001052 <min>
 800124c:	6378      	str	r0, [r7, #52]	; 0x34

	const int x0 = (int) k;
 800124e:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <wt_sample+0x218>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	ee17 3a90 	vmov	r3, s15
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
	const int x1 = x0 + 1;
 800125e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001260:	3301      	adds	r3, #1
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c

	const int p_lo = VCO_F_MIN << (oct1_idx - 1);
 8001264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001266:	3b01      	subs	r3, #1
 8001268:	2228      	movs	r2, #40	; 0x28
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28

	const int interpol_amt = translate_range(f_clamp, p_lo, p_lo << 1, 0, 1);
 8001270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	ee07 3a10 	vmov	s14, r3
 8001282:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001286:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800128a:	eddf 1a53 	vldr	s3, [pc, #332]	; 80013d8 <wt_sample+0x228>
 800128e:	eeb0 1a47 	vmov.f32	s2, s14
 8001292:	eef0 0a67 	vmov.f32	s1, s15
 8001296:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800129a:	f000 f8c9 	bl	8001430 <translate_range>
 800129e:	eef0 7a40 	vmov.f32	s15, s0
 80012a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a6:	ee17 3a90 	vmov	r3, s15
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24

	// interpolate between octaves at point x0
	const float px0_1 = lookup(cv->wave_idx, oct1_idx, x0 % SMPL_SIZE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80012b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b8:	425a      	negs	r2, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	bf58      	it	pl
 80012c0:	4253      	negpl	r3, r2
 80012c2:	461a      	mov	r2, r3
 80012c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80012c6:	ee17 0a90 	vmov	r0, s15
 80012ca:	f7ff ff51 	bl	8001170 <lookup>
 80012ce:	ed87 0a08 	vstr	s0, [r7, #32]
	const float px0_2 = lookup(cv->wave_idx, oct2_idx, x0 % SMPL_SIZE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	425a      	negs	r2, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	bf58      	it	pl
 80012e6:	4253      	negpl	r3, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012ec:	ee17 0a90 	vmov	r0, s15
 80012f0:	f7ff ff3e 	bl	8001170 <lookup>
 80012f4:	ed87 0a07 	vstr	s0, [r7, #28]
	const float y0 = interp(px0_1, px0_2, interpol_amt);
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001302:	eeb0 1a67 	vmov.f32	s2, s15
 8001306:	edd7 0a07 	vldr	s1, [r7, #28]
 800130a:	ed97 0a08 	vldr	s0, [r7, #32]
 800130e:	f7ff feb0 	bl	8001072 <interp>
 8001312:	ed87 0a06 	vstr	s0, [r7, #24]

	// interpolate between octaves at point x1
	const float px1_1 = lookup(cv->wave_idx, oct1_idx, x1 % SMPL_SIZE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	edd3 7a01 	vldr	s15, [r3, #4]
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001322:	425a      	negs	r2, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	bf58      	it	pl
 800132a:	4253      	negpl	r3, r2
 800132c:	461a      	mov	r2, r3
 800132e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001330:	ee17 0a90 	vmov	r0, s15
 8001334:	f7ff ff1c 	bl	8001170 <lookup>
 8001338:	ed87 0a05 	vstr	s0, [r7, #20]
	const float px1_2 = lookup(cv->wave_idx, oct2_idx, x1 % SMPL_SIZE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	425a      	negs	r2, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	bf58      	it	pl
 8001350:	4253      	negpl	r3, r2
 8001352:	461a      	mov	r2, r3
 8001354:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001356:	ee17 0a90 	vmov	r0, s15
 800135a:	f7ff ff09 	bl	8001170 <lookup>
 800135e:	ed87 0a04 	vstr	s0, [r7, #16]
	const float y1 = interp(px1_1, px1_2, interpol_amt);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	eeb0 1a67 	vmov.f32	s2, s15
 8001370:	edd7 0a04 	vldr	s1, [r7, #16]
 8001374:	ed97 0a05 	vldr	s0, [r7, #20]
 8001378:	f7ff fe7b 	bl	8001072 <interp>
 800137c:	ed87 0a03 	vstr	s0, [r7, #12]

	return lerp2pt(x0, y0, x1, y1, k);
 8001380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	ee07 3a10 	vmov	s14, r3
 8001390:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <wt_sample+0x218>)
 8001396:	edd3 6a00 	vldr	s13, [r3]
 800139a:	eeb0 2a66 	vmov.f32	s4, s13
 800139e:	edd7 1a03 	vldr	s3, [r7, #12]
 80013a2:	eeb0 1a47 	vmov.f32	s2, s14
 80013a6:	edd7 0a06 	vldr	s1, [r7, #24]
 80013aa:	eeb0 0a67 	vmov.f32	s0, s15
 80013ae:	f7ff feab 	bl	8001108 <lerp2pt>
 80013b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	3748      	adds	r7, #72	; 0x48
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	43800000 	.word	0x43800000
 80013c4:	473b8000 	.word	0x473b8000
 80013c8:	20000090 	.word	0x20000090
 80013cc:	469c4000 	.word	0x469c4000
 80013d0:	42200000 	.word	0x42200000
 80013d4:	66666667 	.word	0x66666667
 80013d8:	00000000 	.word	0x00000000

080013dc <clamp>:
static inline float clamp(float x, float lower, float upper) {
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80013e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80013ea:	ed87 1a01 	vstr	s2, [r7, #4]
	return x <= lower ? lower : x >= upper ? upper : x;
 80013ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80013f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	d801      	bhi.n	8001404 <clamp+0x28>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	e00b      	b.n	800141c <clamp+0x40>
 8001404:	ed97 7a03 	vldr	s14, [r7, #12]
 8001408:	edd7 7a01 	vldr	s15, [r7, #4]
 800140c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	db01      	blt.n	800141a <clamp+0x3e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	e000      	b.n	800141c <clamp+0x40>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	ee07 3a90 	vmov	s15, r3
}
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <translate_range>:
 *      Author: lukerooney
 */

#include "utility.h"

float translate_range(float x, float from_min, float from_max, float to_min, float to_max) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a05 	vstr	s0, [r7, #20]
 800143a:	edc7 0a04 	vstr	s1, [r7, #16]
 800143e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001442:	edc7 1a02 	vstr	s3, [r7, #8]
 8001446:	ed87 2a01 	vstr	s4, [r7, #4]
	float from_rng = from_max - from_min;
 800144a:	ed97 7a03 	vldr	s14, [r7, #12]
 800144e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001456:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float to_rng = to_max - to_min;
 800145a:	ed97 7a01 	vldr	s14, [r7, #4]
 800145e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001466:	edc7 7a08 	vstr	s15, [r7, #32]

	if (from_rng == 0) {
 800146a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800146e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	d102      	bne.n	800147e <translate_range+0x4e>
		return 0;
 8001478:	eddf 7a12 	vldr	s15, [pc, #72]	; 80014c4 <translate_range+0x94>
 800147c:	e01d      	b.n	80014ba <translate_range+0x8a>
	}

	float out = (((x - from_min) * to_rng) / from_rng) + to_min;
 800147e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001482:	edd7 7a04 	vldr	s15, [r7, #16]
 8001486:	ee37 7a67 	vsub.f32	s14, s14, s15
 800148a:	edd7 7a08 	vldr	s15, [r7, #32]
 800148e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001492:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149a:	ed97 7a02 	vldr	s14, [r7, #8]
 800149e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a2:	edc7 7a07 	vstr	s15, [r7, #28]
	return clamp(out, to_min, to_max);
 80014a6:	ed97 1a01 	vldr	s2, [r7, #4]
 80014aa:	edd7 0a02 	vldr	s1, [r7, #8]
 80014ae:	ed97 0a07 	vldr	s0, [r7, #28]
 80014b2:	f7ff ff93 	bl	80013dc <clamp>
 80014b6:	eef0 7a40 	vmov.f32	s15, s0
}
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	00000000 	.word	0x00000000

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <HAL_Init+0x40>)
 80014d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_Init+0x40>)
 80014de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_Init+0x40>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 fd13 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f808 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff fa9a 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fd2b 	bl	8001f86 <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001548:	f000 fcf3 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	200002c8 	.word	0x200002c8

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200002c8 	.word	0x200002c8

080015ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e033      	b.n	800162a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7fe ffd0 	bl	8000570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015f2:	f023 0302 	bic.w	r3, r3, #2
 80015f6:	f043 0202 	orr.w	r2, r3, #2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fa3e 	bl	8001a80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f023 0303 	bic.w	r3, r3, #3
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
 800161a:	e001      	b.n	8001620 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Start_DMA+0x1e>
 800164e:	2302      	movs	r3, #2
 8001650:	e0ce      	b.n	80017f0 <HAL_ADC_Start_DMA+0x1bc>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d018      	beq.n	800169a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001678:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <HAL_ADC_Start_DMA+0x1c4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a5f      	ldr	r2, [pc, #380]	; (80017fc <HAL_ADC_Start_DMA+0x1c8>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0c9a      	lsrs	r2, r3, #18
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800168c:	e002      	b.n	8001694 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	3b01      	subs	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f9      	bne.n	800168e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a8:	d107      	bne.n	80016ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	f040 8086 	bne.w	80017d6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001708:	d106      	bne.n	8001718 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f023 0206 	bic.w	r2, r3, #6
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
 8001716:	e002      	b.n	800171e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001726:	4b36      	ldr	r3, [pc, #216]	; (8001800 <HAL_ADC_Start_DMA+0x1cc>)
 8001728:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	4a35      	ldr	r2, [pc, #212]	; (8001804 <HAL_ADC_Start_DMA+0x1d0>)
 8001730:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	4a34      	ldr	r2, [pc, #208]	; (8001808 <HAL_ADC_Start_DMA+0x1d4>)
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173e:	4a33      	ldr	r2, [pc, #204]	; (800180c <HAL_ADC_Start_DMA+0x1d8>)
 8001740:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800174a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800175a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800176a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	334c      	adds	r3, #76	; 0x4c
 8001776:	4619      	mov	r1, r3
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f000 fcbe 	bl	80020fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10f      	bne.n	80017ac <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d129      	bne.n	80017ee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	e020      	b.n	80017ee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_ADC_Start_DMA+0x1dc>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11b      	bne.n	80017ee <HAL_ADC_Start_DMA+0x1ba>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d114      	bne.n	80017ee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	e00b      	b.n	80017ee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f043 0210 	orr.w	r2, r3, #16
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000000 	.word	0x20000000
 80017fc:	431bde83 	.word	0x431bde83
 8001800:	40012300 	.word	0x40012300
 8001804:	08001c79 	.word	0x08001c79
 8001808:	08001d33 	.word	0x08001d33
 800180c:	08001d4f 	.word	0x08001d4f
 8001810:	40012000 	.word	0x40012000

08001814 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1c>
 8001854:	2302      	movs	r3, #2
 8001856:	e105      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x228>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b09      	cmp	r3, #9
 8001866:	d925      	bls.n	80018b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68d9      	ldr	r1, [r3, #12]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	3b1e      	subs	r3, #30
 800187e:	2207      	movs	r2, #7
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43da      	mvns	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	400a      	ands	r2, r1
 800188c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68d9      	ldr	r1, [r3, #12]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	4603      	mov	r3, r0
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4403      	add	r3, r0
 80018a6:	3b1e      	subs	r3, #30
 80018a8:	409a      	lsls	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	e022      	b.n	80018fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	2207      	movs	r2, #7
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	400a      	ands	r2, r1
 80018d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6919      	ldr	r1, [r3, #16]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4403      	add	r3, r0
 80018f0:	409a      	lsls	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d824      	bhi.n	800194c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b05      	subs	r3, #5
 8001914:	221f      	movs	r2, #31
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	400a      	ands	r2, r1
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3b05      	subs	r3, #5
 800193e:	fa00 f203 	lsl.w	r2, r0, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
 800194a:	e04c      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b0c      	cmp	r3, #12
 8001952:	d824      	bhi.n	800199e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	3b23      	subs	r3, #35	; 0x23
 8001966:	221f      	movs	r2, #31
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43da      	mvns	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	400a      	ands	r2, r1
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b23      	subs	r3, #35	; 0x23
 8001990:	fa00 f203 	lsl.w	r2, r0, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
 800199c:	e023      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3b41      	subs	r3, #65	; 0x41
 80019b0:	221f      	movs	r2, #31
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	400a      	ands	r2, r1
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4618      	mov	r0, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	3b41      	subs	r3, #65	; 0x41
 80019da:	fa00 f203 	lsl.w	r2, r0, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_ADC_ConfigChannel+0x234>)
 80019e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_ADC_ConfigChannel+0x238>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d109      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x1cc>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b12      	cmp	r3, #18
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_ADC_ConfigChannel+0x238>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d123      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x21e>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d003      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x1e6>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b11      	cmp	r3, #17
 8001a20:	d11b      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d111      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_ADC_ConfigChannel+0x23c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <HAL_ADC_ConfigChannel+0x240>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9a      	lsrs	r2, r3, #18
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a4c:	e002      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f9      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40012300 	.word	0x40012300
 8001a74:	40012000 	.word	0x40012000
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	431bde83 	.word	0x431bde83

08001a80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a88:	4b79      	ldr	r3, [pc, #484]	; (8001c70 <ADC_Init+0x1f0>)
 8001a8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	021a      	lsls	r2, r3, #8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6899      	ldr	r1, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	4a58      	ldr	r2, [pc, #352]	; (8001c74 <ADC_Init+0x1f4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d022      	beq.n	8001b5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6899      	ldr	r1, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6899      	ldr	r1, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	e00f      	b.n	8001b7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0202 	bic.w	r2, r2, #2
 8001b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6899      	ldr	r1, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7e1b      	ldrb	r3, [r3, #24]
 8001b98:	005a      	lsls	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01b      	beq.n	8001be4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6859      	ldr	r1, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	035a      	lsls	r2, r3, #13
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	e007      	b.n	8001bf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	051a      	lsls	r2, r3, #20
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6899      	ldr	r1, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c36:	025a      	lsls	r2, r3, #9
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	029a      	lsls	r2, r3, #10
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	609a      	str	r2, [r3, #8]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40012300 	.word	0x40012300
 8001c74:	0f000001 	.word	0x0f000001

08001c78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d13c      	bne.n	8001d0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d12b      	bne.n	8001d04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d127      	bne.n	8001d04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d119      	bne.n	8001d04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0220 	bic.w	r2, r2, #32
 8001cde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f003 ff1d 	bl	8005b44 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d0a:	e00e      	b.n	8001d2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff fd85 	bl	8001828 <HAL_ADC_ErrorCallback>
}
 8001d1e:	e004      	b.n	8001d2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7ff fd67 	bl	8001814 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2240      	movs	r2, #64	; 0x40
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f043 0204 	orr.w	r2, r3, #4
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fd5a 	bl	8001828 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff29 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff3e 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff31 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa2 	bl	8001ed8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff faf2 	bl	8001594 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e099      	b.n	80020f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fdc:	e00f      	b.n	8001ffe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fde:	f7ff fad9 	bl	8001594 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d908      	bls.n	8001ffe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e078      	b.n	80020f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e8      	bne.n	8001fde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <HAL_DMA_Init+0x158>)
 8002018:	4013      	ands	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002036:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002042:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	2b04      	cmp	r3, #4
 8002056:	d107      	bne.n	8002068 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4313      	orrs	r3, r2
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f023 0307 	bic.w	r3, r3, #7
 800207e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	2b04      	cmp	r3, #4
 8002090:	d117      	bne.n	80020c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00e      	beq.n	80020c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fac3 	bl	8002630 <DMA_CheckFifoParam>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020be:	2301      	movs	r3, #1
 80020c0:	e016      	b.n	80020f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa7a 	bl	80025c4 <DMA_CalcBaseAndBitshift>
 80020d0:	4603      	mov	r3, r0
 80020d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	223f      	movs	r2, #63	; 0x3f
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	f010803f 	.word	0xf010803f

080020fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_DMA_Start_IT+0x26>
 800211e:	2302      	movs	r3, #2
 8002120:	e040      	b.n	80021a4 <HAL_DMA_Start_IT+0xa8>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d12f      	bne.n	8002196 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2202      	movs	r2, #2
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fa0c 	bl	8002568 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	223f      	movs	r2, #63	; 0x3f
 8002156:	409a      	lsls	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0216 	orr.w	r2, r2, #22
 800216a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0208 	orr.w	r2, r2, #8
 8002182:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e005      	b.n	80021a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800219e:	2302      	movs	r3, #2
 80021a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021b8:	4b92      	ldr	r3, [pc, #584]	; (8002404 <HAL_DMA_IRQHandler+0x258>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a92      	ldr	r2, [pc, #584]	; (8002408 <HAL_DMA_IRQHandler+0x25c>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0a9b      	lsrs	r3, r3, #10
 80021c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2208      	movs	r2, #8
 80021d8:	409a      	lsls	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01a      	beq.n	8002218 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0204 	bic.w	r2, r2, #4
 80021fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	2208      	movs	r2, #8
 8002206:	409a      	lsls	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	2201      	movs	r2, #1
 800221e:	409a      	lsls	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d012      	beq.n	800224e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	2201      	movs	r2, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	f043 0202 	orr.w	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	2204      	movs	r2, #4
 8002254:	409a      	lsls	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d012      	beq.n	8002284 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2204      	movs	r2, #4
 8002272:	409a      	lsls	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f043 0204 	orr.w	r2, r3, #4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	2210      	movs	r2, #16
 800228a:	409a      	lsls	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d043      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d03c      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2210      	movs	r2, #16
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d018      	beq.n	80022ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d024      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
 80022da:	e01f      	b.n	800231c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
 80022ec:	e016      	b.n	800231c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0208 	bic.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	2220      	movs	r2, #32
 8002322:	409a      	lsls	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 808e 	beq.w	800244a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8086 	beq.w	800244a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	2220      	movs	r2, #32
 8002344:	409a      	lsls	r2, r3
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b05      	cmp	r3, #5
 8002354:	d136      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0216 	bic.w	r2, r2, #22
 8002364:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002374:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <HAL_DMA_IRQHandler+0x1da>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0208 	bic.w	r2, r2, #8
 8002394:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	223f      	movs	r2, #63	; 0x3f
 800239c:	409a      	lsls	r2, r3
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d07d      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
        }
        return;
 80023c2:	e078      	b.n	80024b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01c      	beq.n	800240c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d108      	bne.n	80023f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d030      	beq.n	800244a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
 80023f0:	e02b      	b.n	800244a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d027      	beq.n	800244a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
 8002402:	e022      	b.n	800244a <HAL_DMA_IRQHandler+0x29e>
 8002404:	20000000 	.word	0x20000000
 8002408:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0210 	bic.w	r2, r2, #16
 8002428:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	2b00      	cmp	r3, #0
 8002450:	d032      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d022      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2205      	movs	r2, #5
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3301      	adds	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	429a      	cmp	r2, r3
 8002480:	d307      	bcc.n	8002492 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f2      	bne.n	8002476 <HAL_DMA_IRQHandler+0x2ca>
 8002490:	e000      	b.n	8002494 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002492:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
 80024b4:	e000      	b.n	80024b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80024b6:	bf00      	nop
    }
  }
}
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop

080024c0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	460b      	mov	r3, r1
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_DMA_RegisterCallback+0x20>
 80024dc:	2302      	movs	r3, #2
 80024de:	e03c      	b.n	800255a <HAL_DMA_RegisterCallback+0x9a>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d129      	bne.n	8002548 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80024f4:	7afb      	ldrb	r3, [r7, #11]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d829      	bhi.n	800254e <HAL_DMA_RegisterCallback+0x8e>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <HAL_DMA_RegisterCallback+0x40>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	08002519 	.word	0x08002519
 8002504:	08002521 	.word	0x08002521
 8002508:	08002529 	.word	0x08002529
 800250c:	08002531 	.word	0x08002531
 8002510:	08002539 	.word	0x08002539
 8002514:	08002541 	.word	0x08002541
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800251e:	e017      	b.n	8002550 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002526:	e013      	b.n	8002550 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800252e:	e00f      	b.n	8002550 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002536:	e00b      	b.n	8002550 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800253e:	e007      	b.n	8002550 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002546:	e003      	b.n	8002550 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	75fb      	strb	r3, [r7, #23]
 800254c:	e000      	b.n	8002550 <HAL_DMA_RegisterCallback+0x90>
      break;
 800254e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002558:	7dfb      	ldrb	r3, [r7, #23]
}
 800255a:	4618      	mov	r0, r3
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop

08002568 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002584:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b40      	cmp	r3, #64	; 0x40
 8002594:	d108      	bne.n	80025a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025a6:	e007      	b.n	80025b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	60da      	str	r2, [r3, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3b10      	subs	r3, #16
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <DMA_CalcBaseAndBitshift+0x64>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <DMA_CalcBaseAndBitshift+0x68>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d909      	bls.n	8002606 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	1d1a      	adds	r2, r3, #4
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	659a      	str	r2, [r3, #88]	; 0x58
 8002604:	e007      	b.n	8002616 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	aaaaaaab 	.word	0xaaaaaaab
 800262c:	0800ff34 	.word	0x0800ff34

08002630 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d11f      	bne.n	800268a <DMA_CheckFifoParam+0x5a>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d856      	bhi.n	80026fe <DMA_CheckFifoParam+0xce>
 8002650:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <DMA_CheckFifoParam+0x28>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	08002669 	.word	0x08002669
 800265c:	0800267b 	.word	0x0800267b
 8002660:	08002669 	.word	0x08002669
 8002664:	080026ff 	.word	0x080026ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d046      	beq.n	8002702 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002678:	e043      	b.n	8002702 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002682:	d140      	bne.n	8002706 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002688:	e03d      	b.n	8002706 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002692:	d121      	bne.n	80026d8 <DMA_CheckFifoParam+0xa8>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d837      	bhi.n	800270a <DMA_CheckFifoParam+0xda>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <DMA_CheckFifoParam+0x70>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026b7 	.word	0x080026b7
 80026a8:	080026b1 	.word	0x080026b1
 80026ac:	080026c9 	.word	0x080026c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      break;
 80026b4:	e030      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d025      	beq.n	800270e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c6:	e022      	b.n	800270e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d0:	d11f      	bne.n	8002712 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026d6:	e01c      	b.n	8002712 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d903      	bls.n	80026e6 <DMA_CheckFifoParam+0xb6>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d003      	beq.n	80026ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026e4:	e018      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
      break;
 80026ea:	e015      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00e      	beq.n	8002716 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      break;
 80026fc:	e00b      	b.n	8002716 <DMA_CheckFifoParam+0xe6>
      break;
 80026fe:	bf00      	nop
 8002700:	e00a      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 8002702:	bf00      	nop
 8002704:	e008      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 8002706:	bf00      	nop
 8002708:	e006      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 800270a:	bf00      	nop
 800270c:	e004      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;   
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
    }
  } 
  
  return status; 
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop

08002728 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b80      	cmp	r3, #128	; 0x80
 8002740:	d106      	bne.n	8002750 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f001 b913 	b.w	8003976 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	f001 b901 	b.w	8003976 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800277a:	2b01      	cmp	r3, #1
 800277c:	d102      	bne.n	8002784 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800277e:	2302      	movs	r3, #2
 8002780:	f001 b8f9 	b.w	8003976 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	f041 80e7 	bne.w	8003968 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2202      	movs	r2, #2
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027b6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f001 f8f6 	bl	80039b8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b99      	ldr	r3, [pc, #612]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d960      	bls.n	800289a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a97      	ldr	r2, [pc, #604]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d057      	beq.n	8002892 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a96      	ldr	r2, [pc, #600]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d050      	beq.n	800288e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a94      	ldr	r2, [pc, #592]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d049      	beq.n	800288a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a93      	ldr	r2, [pc, #588]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d042      	beq.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a91      	ldr	r2, [pc, #580]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d03a      	beq.n	8002880 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a90      	ldr	r2, [pc, #576]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d032      	beq.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a8e      	ldr	r2, [pc, #568]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02a      	beq.n	8002874 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a8d      	ldr	r2, [pc, #564]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d022      	beq.n	800286e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a8b      	ldr	r2, [pc, #556]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01a      	beq.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a8a      	ldr	r2, [pc, #552]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d012      	beq.n	8002862 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a88      	ldr	r2, [pc, #544]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00a      	beq.n	800285c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a87      	ldr	r2, [pc, #540]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d102      	bne.n	8002856 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002854:	e01e      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800285a:	e01b      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800285c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002860:	e018      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002862:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002866:	e015      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002868:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800286c:	e012      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800286e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002872:	e00f      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002878:	e00c      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800287a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800287e:	e009      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002884:	e006      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002886:	2320      	movs	r3, #32
 8002888:	e004      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800288a:	2320      	movs	r3, #32
 800288c:	e002      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800288e:	2320      	movs	r3, #32
 8002890:	e000      	b.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002892:	2320      	movs	r3, #32
 8002894:	4a75      	ldr	r2, [pc, #468]	; (8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002896:	60d3      	str	r3, [r2, #12]
 8002898:	e150      	b.n	8002b3c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	4b73      	ldr	r3, [pc, #460]	; (8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d960      	bls.n	8002968 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a64      	ldr	r2, [pc, #400]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d057      	beq.n	8002960 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a62      	ldr	r2, [pc, #392]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d050      	beq.n	800295c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a61      	ldr	r2, [pc, #388]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d049      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5f      	ldr	r2, [pc, #380]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d042      	beq.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a5e      	ldr	r2, [pc, #376]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d03a      	beq.n	800294e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a5c      	ldr	r2, [pc, #368]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d032      	beq.n	8002948 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5b      	ldr	r2, [pc, #364]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d02a      	beq.n	8002942 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a59      	ldr	r2, [pc, #356]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d022      	beq.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d01a      	beq.n	8002936 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d012      	beq.n	8002930 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a55      	ldr	r2, [pc, #340]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00a      	beq.n	800292a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a53      	ldr	r2, [pc, #332]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d102      	bne.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800291e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002922:	e01e      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002924:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002928:	e01b      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800292a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800292e:	e018      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002934:	e015      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002936:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800293a:	e012      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800293c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002940:	e00f      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002942:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002946:	e00c      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800294c:	e009      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800294e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002952:	e006      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002954:	2320      	movs	r3, #32
 8002956:	e004      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002958:	2320      	movs	r3, #32
 800295a:	e002      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800295c:	2320      	movs	r3, #32
 800295e:	e000      	b.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002960:	2320      	movs	r3, #32
 8002962:	4a42      	ldr	r2, [pc, #264]	; (8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002964:	6093      	str	r3, [r2, #8]
 8002966:	e0e9      	b.n	8002b3c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002970:	429a      	cmp	r2, r3
 8002972:	f240 8083 	bls.w	8002a7c <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a30      	ldr	r2, [pc, #192]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d057      	beq.n	8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d050      	beq.n	8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x304>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d049      	beq.n	8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d042      	beq.n	8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d03a      	beq.n	8002a1e <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d032      	beq.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d02a      	beq.n	8002a12 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d022      	beq.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01a      	beq.n	8002a06 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d012      	beq.n	8002a00 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00a      	beq.n	80029fa <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d102      	bne.n	80029f4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80029ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029f2:	e01e      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80029f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029f8:	e01b      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80029fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029fe:	e018      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a04:	e015      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a06:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a0a:	e012      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a10:	e00f      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a16:	e00c      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a1c:	e009      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a22:	e006      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a24:	2320      	movs	r3, #32
 8002a26:	e004      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e002      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e000      	b.n	8002a32 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002a30:	2320      	movs	r3, #32
 8002a32:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002a34:	60d3      	str	r3, [r2, #12]
 8002a36:	e081      	b.n	8002b3c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002a38:	40026458 	.word	0x40026458
 8002a3c:	40026010 	.word	0x40026010
 8002a40:	40026410 	.word	0x40026410
 8002a44:	40026070 	.word	0x40026070
 8002a48:	40026470 	.word	0x40026470
 8002a4c:	40026028 	.word	0x40026028
 8002a50:	40026428 	.word	0x40026428
 8002a54:	40026088 	.word	0x40026088
 8002a58:	40026488 	.word	0x40026488
 8002a5c:	40026040 	.word	0x40026040
 8002a60:	40026440 	.word	0x40026440
 8002a64:	400260a0 	.word	0x400260a0
 8002a68:	400264a0 	.word	0x400264a0
 8002a6c:	40026400 	.word	0x40026400
 8002a70:	400260b8 	.word	0x400260b8
 8002a74:	40026058 	.word	0x40026058
 8002a78:	40026000 	.word	0x40026000
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a96      	ldr	r2, [pc, #600]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d057      	beq.n	8002b36 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a95      	ldr	r2, [pc, #596]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d050      	beq.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a93      	ldr	r2, [pc, #588]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d049      	beq.n	8002b2e <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a92      	ldr	r2, [pc, #584]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d042      	beq.n	8002b2a <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a90      	ldr	r2, [pc, #576]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d03a      	beq.n	8002b24 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a8f      	ldr	r2, [pc, #572]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d032      	beq.n	8002b1e <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a8d      	ldr	r2, [pc, #564]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02a      	beq.n	8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a8c      	ldr	r2, [pc, #560]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a8a      	ldr	r2, [pc, #552]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01a      	beq.n	8002b0c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a89      	ldr	r2, [pc, #548]	; (8002d00 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d012      	beq.n	8002b06 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a87      	ldr	r2, [pc, #540]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00a      	beq.n	8002b00 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a86      	ldr	r2, [pc, #536]	; (8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d102      	bne.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002af4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002af8:	e01e      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002afa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002afe:	e01b      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b04:	e018      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b06:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b0a:	e015      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b10:	e012      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b16:	e00f      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b1c:	e00c      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b22:	e009      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b28:	e006      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e004      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b2e:	2320      	movs	r3, #32
 8002b30:	e002      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b32:	2320      	movs	r3, #32
 8002b34:	e000      	b.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002b36:	2320      	movs	r3, #32
 8002b38:	4a74      	ldr	r2, [pc, #464]	; (8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002b3a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d960      	bls.n	8002c0a <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a63      	ldr	r2, [pc, #396]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d057      	beq.n	8002c02 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a62      	ldr	r2, [pc, #392]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d050      	beq.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a60      	ldr	r2, [pc, #384]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d049      	beq.n	8002bfa <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5f      	ldr	r2, [pc, #380]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d042      	beq.n	8002bf6 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a5d      	ldr	r2, [pc, #372]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d03a      	beq.n	8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a5c      	ldr	r2, [pc, #368]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d032      	beq.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a5a      	ldr	r2, [pc, #360]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02a      	beq.n	8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a59      	ldr	r2, [pc, #356]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a57      	ldr	r2, [pc, #348]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a56      	ldr	r2, [pc, #344]	; (8002d00 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d012      	beq.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a54      	ldr	r2, [pc, #336]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00a      	beq.n	8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a53      	ldr	r2, [pc, #332]	; (8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002bc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bc4:	e01e      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bca:	e01b      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bd0:	e018      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bd6:	e015      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bdc:	e012      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be2:	e00f      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be8:	e00c      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bee:	e009      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf4:	e006      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	e004      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	e002      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002bfe:	2310      	movs	r3, #16
 8002c00:	e000      	b.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002c02:	2310      	movs	r3, #16
 8002c04:	4a43      	ldr	r2, [pc, #268]	; (8002d14 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002c06:	60d3      	str	r3, [r2, #12]
 8002c08:	e14f      	b.n	8002eaa <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8002c12:	429a      	cmp	r2, r3
 8002c14:	f240 8082 	bls.w	8002d1c <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d057      	beq.n	8002cd2 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a2e      	ldr	r2, [pc, #184]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d050      	beq.n	8002cce <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a2c      	ldr	r2, [pc, #176]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d049      	beq.n	8002cca <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d042      	beq.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a29      	ldr	r2, [pc, #164]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d03a      	beq.n	8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d032      	beq.n	8002cba <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02a      	beq.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01a      	beq.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d012      	beq.n	8002ca2 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00a      	beq.n	8002c9c <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d102      	bne.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002c90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c94:	e01e      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002c96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c9a:	e01b      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002c9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ca0:	e018      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002ca2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ca6:	e015      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002ca8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cac:	e012      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb2:	e00f      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb8:	e00c      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbe:	e009      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc4:	e006      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	e004      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002cca:	2310      	movs	r3, #16
 8002ccc:	e002      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002cce:	2310      	movs	r3, #16
 8002cd0:	e000      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002cd6:	6093      	str	r3, [r2, #8]
 8002cd8:	e0e7      	b.n	8002eaa <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002cda:	bf00      	nop
 8002cdc:	40026010 	.word	0x40026010
 8002ce0:	40026410 	.word	0x40026410
 8002ce4:	40026070 	.word	0x40026070
 8002ce8:	40026470 	.word	0x40026470
 8002cec:	40026028 	.word	0x40026028
 8002cf0:	40026428 	.word	0x40026428
 8002cf4:	40026088 	.word	0x40026088
 8002cf8:	40026488 	.word	0x40026488
 8002cfc:	40026040 	.word	0x40026040
 8002d00:	40026440 	.word	0x40026440
 8002d04:	400260a0 	.word	0x400260a0
 8002d08:	400264a0 	.word	0x400264a0
 8002d0c:	40026000 	.word	0x40026000
 8002d10:	40026458 	.word	0x40026458
 8002d14:	40026400 	.word	0x40026400
 8002d18:	400260b8 	.word	0x400260b8
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b96      	ldr	r3, [pc, #600]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d960      	bls.n	8002dea <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a94      	ldr	r2, [pc, #592]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d057      	beq.n	8002de2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a93      	ldr	r2, [pc, #588]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d050      	beq.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a91      	ldr	r2, [pc, #580]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d049      	beq.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a90      	ldr	r2, [pc, #576]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d042      	beq.n	8002dd6 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a8e      	ldr	r2, [pc, #568]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d03a      	beq.n	8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a8d      	ldr	r2, [pc, #564]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d032      	beq.n	8002dca <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a8b      	ldr	r2, [pc, #556]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02a      	beq.n	8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a8a      	ldr	r2, [pc, #552]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a88      	ldr	r2, [pc, #544]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01a      	beq.n	8002db8 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a87      	ldr	r2, [pc, #540]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d012      	beq.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a85      	ldr	r2, [pc, #532]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00a      	beq.n	8002dac <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a84      	ldr	r2, [pc, #528]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d102      	bne.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8002da0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002da4:	e01e      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002da6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002daa:	e01b      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002dac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002db0:	e018      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002db2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002db6:	e015      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002db8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dbc:	e012      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc2:	e00f      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc8:	e00c      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dce:	e009      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd4:	e006      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002dd6:	2310      	movs	r3, #16
 8002dd8:	e004      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002dda:	2310      	movs	r3, #16
 8002ddc:	e002      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002dde:	2310      	movs	r3, #16
 8002de0:	e000      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002de2:	2310      	movs	r3, #16
 8002de4:	4a72      	ldr	r2, [pc, #456]	; (8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002de6:	60d3      	str	r3, [r2, #12]
 8002de8:	e05f      	b.n	8002eaa <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a64      	ldr	r2, [pc, #400]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d057      	beq.n	8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a62      	ldr	r2, [pc, #392]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d050      	beq.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a61      	ldr	r2, [pc, #388]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d049      	beq.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a5f      	ldr	r2, [pc, #380]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d042      	beq.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a5e      	ldr	r2, [pc, #376]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d03a      	beq.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a5c      	ldr	r2, [pc, #368]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d032      	beq.n	8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a5b      	ldr	r2, [pc, #364]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d02a      	beq.n	8002e86 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a59      	ldr	r2, [pc, #356]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d022      	beq.n	8002e80 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d01a      	beq.n	8002e7a <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a56      	ldr	r2, [pc, #344]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d012      	beq.n	8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a55      	ldr	r2, [pc, #340]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00a      	beq.n	8002e6e <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a53      	ldr	r2, [pc, #332]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d102      	bne.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8002e62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e66:	e01e      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e6c:	e01b      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e72:	e018      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e78:	e015      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e7e:	e012      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e84:	e00f      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8a:	e00c      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e90:	e009      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e96:	e006      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e98:	2310      	movs	r3, #16
 8002e9a:	e004      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	e002      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	e000      	b.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	4a42      	ldr	r2, [pc, #264]	; (8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002ea8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	f240 8082 	bls.w	8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a30      	ldr	r2, [pc, #192]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d057      	beq.n	8002f72 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d050      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d049      	beq.n	8002f6a <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2c      	ldr	r2, [pc, #176]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d042      	beq.n	8002f66 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d03a      	beq.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a29      	ldr	r2, [pc, #164]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d032      	beq.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02a      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d022      	beq.n	8002f4e <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01a      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d012      	beq.n	8002f42 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00a      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a20      	ldr	r2, [pc, #128]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d102      	bne.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8002f30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f34:	e01e      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3a:	e01b      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f40:	e018      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f46:	e015      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f4c:	e012      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f52:	e00f      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f58:	e00c      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f5e:	e009      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f64:	e006      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f66:	2308      	movs	r3, #8
 8002f68:	e004      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	e002      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f6e:	2308      	movs	r3, #8
 8002f70:	e000      	b.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002f72:	2308      	movs	r3, #8
 8002f74:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8002f76:	60d3      	str	r3, [r2, #12]
 8002f78:	e16f      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002f7a:	bf00      	nop
 8002f7c:	40026058 	.word	0x40026058
 8002f80:	40026010 	.word	0x40026010
 8002f84:	40026410 	.word	0x40026410
 8002f88:	40026070 	.word	0x40026070
 8002f8c:	40026470 	.word	0x40026470
 8002f90:	40026028 	.word	0x40026028
 8002f94:	40026428 	.word	0x40026428
 8002f98:	40026088 	.word	0x40026088
 8002f9c:	40026488 	.word	0x40026488
 8002fa0:	40026040 	.word	0x40026040
 8002fa4:	40026440 	.word	0x40026440
 8002fa8:	400260a0 	.word	0x400260a0
 8002fac:	400264a0 	.word	0x400264a0
 8002fb0:	40026000 	.word	0x40026000
 8002fb4:	40026458 	.word	0x40026458
 8002fb8:	40026400 	.word	0x40026400
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b94      	ldr	r3, [pc, #592]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d960      	bls.n	800308a <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a92      	ldr	r2, [pc, #584]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d057      	beq.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a91      	ldr	r2, [pc, #580]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d050      	beq.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a8f      	ldr	r2, [pc, #572]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d049      	beq.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a8e      	ldr	r2, [pc, #568]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d042      	beq.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a8c      	ldr	r2, [pc, #560]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d03a      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a8b      	ldr	r2, [pc, #556]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d032      	beq.n	800306a <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a89      	ldr	r2, [pc, #548]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d02a      	beq.n	8003064 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a88      	ldr	r2, [pc, #544]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d022      	beq.n	800305e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a86      	ldr	r2, [pc, #536]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01a      	beq.n	8003058 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a85      	ldr	r2, [pc, #532]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d012      	beq.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a83      	ldr	r2, [pc, #524]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00a      	beq.n	800304c <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a82      	ldr	r2, [pc, #520]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d102      	bne.n	8003046 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8003040:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003044:	e01e      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304a:	e01b      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800304c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003050:	e018      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003052:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003056:	e015      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003058:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800305c:	e012      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800305e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003062:	e00f      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003068:	e00c      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800306a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800306e:	e009      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003074:	e006      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003076:	2308      	movs	r3, #8
 8003078:	e004      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800307a:	2308      	movs	r3, #8
 800307c:	e002      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800307e:	2308      	movs	r3, #8
 8003080:	e000      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003082:	2308      	movs	r3, #8
 8003084:	4a70      	ldr	r2, [pc, #448]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	e0e7      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b6e      	ldr	r3, [pc, #440]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8003092:	429a      	cmp	r2, r3
 8003094:	d960      	bls.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a5f      	ldr	r2, [pc, #380]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d057      	beq.n	8003150 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a5d      	ldr	r2, [pc, #372]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d050      	beq.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a5c      	ldr	r2, [pc, #368]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d049      	beq.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5a      	ldr	r2, [pc, #360]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d042      	beq.n	8003144 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a59      	ldr	r2, [pc, #356]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d03a      	beq.n	800313e <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a57      	ldr	r2, [pc, #348]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d032      	beq.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a56      	ldr	r2, [pc, #344]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d02a      	beq.n	8003132 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a54      	ldr	r2, [pc, #336]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d022      	beq.n	800312c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a53      	ldr	r2, [pc, #332]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d01a      	beq.n	8003126 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a51      	ldr	r2, [pc, #324]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d012      	beq.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a50      	ldr	r2, [pc, #320]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00a      	beq.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a4e      	ldr	r2, [pc, #312]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d102      	bne.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800310e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003112:	e01e      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003118:	e01b      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800311a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800311e:	e018      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003120:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003124:	e015      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003126:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800312a:	e012      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800312c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003130:	e00f      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003136:	e00c      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800313c:	e009      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800313e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003142:	e006      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003144:	2308      	movs	r3, #8
 8003146:	e004      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003148:	2308      	movs	r3, #8
 800314a:	e002      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800314c:	2308      	movs	r3, #8
 800314e:	e000      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003150:	2308      	movs	r3, #8
 8003152:	4a3f      	ldr	r2, [pc, #252]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8003154:	60d3      	str	r3, [r2, #12]
 8003156:	e080      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2e      	ldr	r2, [pc, #184]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d078      	beq.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2d      	ldr	r2, [pc, #180]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d050      	beq.n	800320e <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d049      	beq.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2a      	ldr	r2, [pc, #168]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d042      	beq.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a28      	ldr	r2, [pc, #160]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d03a      	beq.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a27      	ldr	r2, [pc, #156]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d032      	beq.n	80031fa <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a25      	ldr	r2, [pc, #148]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d02a      	beq.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a24      	ldr	r2, [pc, #144]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01a      	beq.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a21      	ldr	r2, [pc, #132]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d012      	beq.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1f      	ldr	r2, [pc, #124]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00a      	beq.n	80031dc <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d102      	bne.n	80031d6 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80031d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031d4:	e03f      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80031d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031da:	e03c      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80031dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031e0:	e039      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80031e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031e6:	e036      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80031e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031ec:	e033      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80031ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f2:	e030      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80031f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f8:	e02d      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80031fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031fe:	e02a      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003204:	e027      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003206:	2308      	movs	r3, #8
 8003208:	e025      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800320a:	2308      	movs	r3, #8
 800320c:	e023      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800320e:	2308      	movs	r3, #8
 8003210:	e021      	b.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003212:	bf00      	nop
 8003214:	400260b8 	.word	0x400260b8
 8003218:	40026010 	.word	0x40026010
 800321c:	40026410 	.word	0x40026410
 8003220:	40026070 	.word	0x40026070
 8003224:	40026470 	.word	0x40026470
 8003228:	40026028 	.word	0x40026028
 800322c:	40026428 	.word	0x40026428
 8003230:	40026088 	.word	0x40026088
 8003234:	40026488 	.word	0x40026488
 8003238:	40026040 	.word	0x40026040
 800323c:	40026440 	.word	0x40026440
 8003240:	400260a0 	.word	0x400260a0
 8003244:	400264a0 	.word	0x400264a0
 8003248:	40026400 	.word	0x40026400
 800324c:	40026058 	.word	0x40026058
 8003250:	40026000 	.word	0x40026000
 8003254:	2308      	movs	r3, #8
 8003256:	4a9a      	ldr	r2, [pc, #616]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003258:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	4b98      	ldr	r3, [pc, #608]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8003262:	429a      	cmp	r2, r3
 8003264:	d960      	bls.n	8003328 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a97      	ldr	r2, [pc, #604]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d057      	beq.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a95      	ldr	r2, [pc, #596]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d050      	beq.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a94      	ldr	r2, [pc, #592]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d049      	beq.n	8003318 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a92      	ldr	r2, [pc, #584]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d042      	beq.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a91      	ldr	r2, [pc, #580]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d03a      	beq.n	800330e <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a8f      	ldr	r2, [pc, #572]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d032      	beq.n	8003308 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a8e      	ldr	r2, [pc, #568]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d02a      	beq.n	8003302 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a8c      	ldr	r2, [pc, #560]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d022      	beq.n	80032fc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a8b      	ldr	r2, [pc, #556]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d01a      	beq.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a89      	ldr	r2, [pc, #548]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d012      	beq.n	80032f0 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a88      	ldr	r2, [pc, #544]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00a      	beq.n	80032ea <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a86      	ldr	r2, [pc, #536]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d102      	bne.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80032de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032e2:	e01e      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80032e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e8:	e01b      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80032ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032ee:	e018      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80032f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032f4:	e015      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80032f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032fa:	e012      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80032fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003300:	e00f      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003306:	e00c      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800330c:	e009      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800330e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003312:	e006      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003314:	2304      	movs	r3, #4
 8003316:	e004      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003318:	2304      	movs	r3, #4
 800331a:	e002      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800331c:	2304      	movs	r3, #4
 800331e:	e000      	b.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003320:	2304      	movs	r3, #4
 8003322:	4a75      	ldr	r2, [pc, #468]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003324:	60d3      	str	r3, [r2, #12]
 8003326:	e151      	b.n	80035cc <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	4b73      	ldr	r3, [pc, #460]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8003330:	429a      	cmp	r2, r3
 8003332:	d960      	bls.n	80033f6 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a63      	ldr	r2, [pc, #396]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d057      	beq.n	80033ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a62      	ldr	r2, [pc, #392]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d050      	beq.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a60      	ldr	r2, [pc, #384]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d049      	beq.n	80033e6 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a5f      	ldr	r2, [pc, #380]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d042      	beq.n	80033e2 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a5d      	ldr	r2, [pc, #372]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d03a      	beq.n	80033dc <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a5c      	ldr	r2, [pc, #368]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d032      	beq.n	80033d6 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a5a      	ldr	r2, [pc, #360]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02a      	beq.n	80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a59      	ldr	r2, [pc, #356]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d022      	beq.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a57      	ldr	r2, [pc, #348]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01a      	beq.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a56      	ldr	r2, [pc, #344]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d012      	beq.n	80033be <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a54      	ldr	r2, [pc, #336]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00a      	beq.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a53      	ldr	r2, [pc, #332]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d102      	bne.n	80033b2 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80033ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033b0:	e01e      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b6:	e01b      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033bc:	e018      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033c2:	e015      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033c8:	e012      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ce:	e00f      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d4:	e00c      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033da:	e009      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033e0:	e006      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033e2:	2304      	movs	r3, #4
 80033e4:	e004      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033e6:	2304      	movs	r3, #4
 80033e8:	e002      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033ea:	2304      	movs	r3, #4
 80033ec:	e000      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80033ee:	2304      	movs	r3, #4
 80033f0:	4a41      	ldr	r2, [pc, #260]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80033f2:	6093      	str	r3, [r2, #8]
 80033f4:	e0ea      	b.n	80035cc <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 80033fe:	429a      	cmp	r2, r3
 8003400:	f240 8084 	bls.w	800350c <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d07a      	beq.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d050      	beq.n	80034ba <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a2c      	ldr	r2, [pc, #176]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d049      	beq.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2b      	ldr	r2, [pc, #172]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d042      	beq.n	80034b2 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d03a      	beq.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a28      	ldr	r2, [pc, #160]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d032      	beq.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d02a      	beq.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d022      	beq.n	800349a <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01a      	beq.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a22      	ldr	r2, [pc, #136]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d012      	beq.n	800348e <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00a      	beq.n	8003488 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d102      	bne.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 800347c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003480:	e041      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003482:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003486:	e03e      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003488:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800348c:	e03b      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800348e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003492:	e038      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003494:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003498:	e035      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800349a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349e:	e032      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80034a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034a4:	e02f      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80034a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034aa:	e02c      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80034ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b0:	e029      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80034b2:	2304      	movs	r3, #4
 80034b4:	e027      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80034b6:	2304      	movs	r3, #4
 80034b8:	e025      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80034ba:	2304      	movs	r3, #4
 80034bc:	e023      	b.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80034be:	bf00      	nop
 80034c0:	40026000 	.word	0x40026000
 80034c4:	40026458 	.word	0x40026458
 80034c8:	40026010 	.word	0x40026010
 80034cc:	40026410 	.word	0x40026410
 80034d0:	40026070 	.word	0x40026070
 80034d4:	40026470 	.word	0x40026470
 80034d8:	40026028 	.word	0x40026028
 80034dc:	40026428 	.word	0x40026428
 80034e0:	40026088 	.word	0x40026088
 80034e4:	40026488 	.word	0x40026488
 80034e8:	40026040 	.word	0x40026040
 80034ec:	40026440 	.word	0x40026440
 80034f0:	400260a0 	.word	0x400260a0
 80034f4:	400264a0 	.word	0x400264a0
 80034f8:	40026400 	.word	0x40026400
 80034fc:	400260b8 	.word	0x400260b8
 8003500:	40026058 	.word	0x40026058
 8003504:	2304      	movs	r3, #4
 8003506:	4a94      	ldr	r2, [pc, #592]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003508:	60d3      	str	r3, [r2, #12]
 800350a:	e05f      	b.n	80035cc <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a92      	ldr	r2, [pc, #584]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d057      	beq.n	80035c6 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a91      	ldr	r2, [pc, #580]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d050      	beq.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a8f      	ldr	r2, [pc, #572]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d049      	beq.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a8e      	ldr	r2, [pc, #568]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d042      	beq.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a8c      	ldr	r2, [pc, #560]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d03a      	beq.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a8b      	ldr	r2, [pc, #556]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d032      	beq.n	80035ae <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a89      	ldr	r2, [pc, #548]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02a      	beq.n	80035a8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a88      	ldr	r2, [pc, #544]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a86      	ldr	r2, [pc, #536]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01a      	beq.n	800359c <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a85      	ldr	r2, [pc, #532]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d012      	beq.n	8003596 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a83      	ldr	r2, [pc, #524]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00a      	beq.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a82      	ldr	r2, [pc, #520]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d102      	bne.n	800358a <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8003584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003588:	e01e      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800358a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800358e:	e01b      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003590:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003594:	e018      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003596:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800359a:	e015      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800359c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035a0:	e012      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80035a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a6:	e00f      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80035a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ac:	e00c      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80035ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b2:	e009      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80035b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b8:	e006      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80035ba:	2304      	movs	r3, #4
 80035bc:	e004      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80035be:	2304      	movs	r3, #4
 80035c0:	e002      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80035c2:	2304      	movs	r3, #4
 80035c4:	e000      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80035c6:	2304      	movs	r3, #4
 80035c8:	4a63      	ldr	r2, [pc, #396]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80035ca:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b6e      	ldr	r3, [pc, #440]	; (800378c <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d95c      	bls.n	8003692 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5f      	ldr	r2, [pc, #380]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d053      	beq.n	800368a <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5e      	ldr	r2, [pc, #376]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d04c      	beq.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a5c      	ldr	r2, [pc, #368]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d045      	beq.n	8003682 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a5b      	ldr	r2, [pc, #364]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d03e      	beq.n	800367e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a59      	ldr	r2, [pc, #356]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d037      	beq.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a58      	ldr	r2, [pc, #352]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d030      	beq.n	8003676 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a56      	ldr	r2, [pc, #344]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d029      	beq.n	8003672 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a55      	ldr	r2, [pc, #340]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d022      	beq.n	800366e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a53      	ldr	r2, [pc, #332]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01a      	beq.n	8003668 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a52      	ldr	r2, [pc, #328]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d012      	beq.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a50      	ldr	r2, [pc, #320]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00a      	beq.n	800365c <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a4f      	ldr	r2, [pc, #316]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d102      	bne.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003654:	e01a      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800365a:	e017      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800365c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003660:	e014      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003666:	e011      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800366c:	e00e      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800366e:	2340      	movs	r3, #64	; 0x40
 8003670:	e00c      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	e00a      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003676:	2340      	movs	r3, #64	; 0x40
 8003678:	e008      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800367a:	2340      	movs	r3, #64	; 0x40
 800367c:	e006      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800367e:	2301      	movs	r3, #1
 8003680:	e004      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003682:	2301      	movs	r3, #1
 8003684:	e002      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800368a:	2301      	movs	r3, #1
 800368c:	4a40      	ldr	r2, [pc, #256]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 800368e:	60d3      	str	r3, [r2, #12]
 8003690:	e141      	b.n	8003916 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 800369a:	429a      	cmp	r2, r3
 800369c:	d97c      	bls.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2e      	ldr	r2, [pc, #184]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d053      	beq.n	8003750 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d04c      	beq.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2b      	ldr	r2, [pc, #172]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d045      	beq.n	8003748 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d03e      	beq.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a28      	ldr	r2, [pc, #160]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d037      	beq.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a26      	ldr	r2, [pc, #152]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d030      	beq.n	800373c <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a25      	ldr	r2, [pc, #148]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d029      	beq.n	8003738 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a23      	ldr	r2, [pc, #140]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a22      	ldr	r2, [pc, #136]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01a      	beq.n	800372e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a20      	ldr	r2, [pc, #128]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d012      	beq.n	8003728 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1f      	ldr	r2, [pc, #124]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00a      	beq.n	8003722 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d102      	bne.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800371a:	e01a      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800371c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003720:	e017      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003726:	e014      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800372c:	e011      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800372e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003732:	e00e      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003734:	2340      	movs	r3, #64	; 0x40
 8003736:	e00c      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003738:	2340      	movs	r3, #64	; 0x40
 800373a:	e00a      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800373c:	2340      	movs	r3, #64	; 0x40
 800373e:	e008      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003740:	2340      	movs	r3, #64	; 0x40
 8003742:	e006      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003744:	2301      	movs	r3, #1
 8003746:	e004      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003748:	2301      	movs	r3, #1
 800374a:	e002      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003750:	2301      	movs	r3, #1
 8003752:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003754:	6093      	str	r3, [r2, #8]
 8003756:	e0de      	b.n	8003916 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003758:	40026000 	.word	0x40026000
 800375c:	40026010 	.word	0x40026010
 8003760:	40026410 	.word	0x40026410
 8003764:	40026070 	.word	0x40026070
 8003768:	40026470 	.word	0x40026470
 800376c:	40026028 	.word	0x40026028
 8003770:	40026428 	.word	0x40026428
 8003774:	40026088 	.word	0x40026088
 8003778:	40026488 	.word	0x40026488
 800377c:	40026040 	.word	0x40026040
 8003780:	40026440 	.word	0x40026440
 8003784:	400260a0 	.word	0x400260a0
 8003788:	400264a0 	.word	0x400264a0
 800378c:	40026458 	.word	0x40026458
 8003790:	40026400 	.word	0x40026400
 8003794:	400260b8 	.word	0x400260b8
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b78      	ldr	r3, [pc, #480]	; (8003980 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d95c      	bls.n	800385e <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a76      	ldr	r2, [pc, #472]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d053      	beq.n	8003856 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a75      	ldr	r2, [pc, #468]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d04c      	beq.n	8003852 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a73      	ldr	r2, [pc, #460]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d045      	beq.n	800384e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a72      	ldr	r2, [pc, #456]	; (8003990 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d03e      	beq.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a70      	ldr	r2, [pc, #448]	; (8003994 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d037      	beq.n	8003846 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6f      	ldr	r2, [pc, #444]	; (8003998 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d030      	beq.n	8003842 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6d      	ldr	r2, [pc, #436]	; (800399c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d029      	beq.n	800383e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6c      	ldr	r2, [pc, #432]	; (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d022      	beq.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6a      	ldr	r2, [pc, #424]	; (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01a      	beq.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a69      	ldr	r2, [pc, #420]	; (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d012      	beq.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a67      	ldr	r2, [pc, #412]	; (80039ac <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00a      	beq.n	8003828 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a66      	ldr	r2, [pc, #408]	; (80039b0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d102      	bne.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 800381c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003820:	e01a      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003826:	e017      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800382c:	e014      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800382e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003832:	e011      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003838:	e00e      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	e00c      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	e00a      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003842:	2340      	movs	r3, #64	; 0x40
 8003844:	e008      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003846:	2340      	movs	r3, #64	; 0x40
 8003848:	e006      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800384a:	2301      	movs	r3, #1
 800384c:	e004      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800384e:	2301      	movs	r3, #1
 8003850:	e002      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003856:	2301      	movs	r3, #1
 8003858:	4a56      	ldr	r2, [pc, #344]	; (80039b4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800385a:	60d3      	str	r3, [r2, #12]
 800385c:	e05b      	b.n	8003916 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a48      	ldr	r2, [pc, #288]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d053      	beq.n	8003910 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a46      	ldr	r2, [pc, #280]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04c      	beq.n	800390c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a45      	ldr	r2, [pc, #276]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a43      	ldr	r2, [pc, #268]	; (8003990 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d03e      	beq.n	8003904 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a42      	ldr	r2, [pc, #264]	; (8003994 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d037      	beq.n	8003900 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a40      	ldr	r2, [pc, #256]	; (8003998 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d030      	beq.n	80038fc <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3f      	ldr	r2, [pc, #252]	; (800399c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d029      	beq.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3d      	ldr	r2, [pc, #244]	; (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3c      	ldr	r2, [pc, #240]	; (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d01a      	beq.n	80038ee <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a3a      	ldr	r2, [pc, #232]	; (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d012      	beq.n	80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a39      	ldr	r2, [pc, #228]	; (80039ac <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00a      	beq.n	80038e2 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a37      	ldr	r2, [pc, #220]	; (80039b0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d102      	bne.n	80038dc <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80038d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038da:	e01a      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80038dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038e0:	e017      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80038e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038e6:	e014      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80038e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ec:	e011      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80038ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f2:	e00e      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80038f4:	2340      	movs	r3, #64	; 0x40
 80038f6:	e00c      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80038f8:	2340      	movs	r3, #64	; 0x40
 80038fa:	e00a      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80038fc:	2340      	movs	r3, #64	; 0x40
 80038fe:	e008      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003900:	2340      	movs	r3, #64	; 0x40
 8003902:	e006      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003904:	2301      	movs	r3, #1
 8003906:	e004      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003908:	2301      	movs	r3, #1
 800390a:	e002      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003910:	2301      	movs	r3, #1
 8003912:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003914:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0216 	orr.w	r2, r2, #22
 8003924:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003934:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d103      	bne.n	8003946 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0208 	orr.w	r2, r2, #8
 8003954:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e005      	b.n	8003974 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003970:	2302      	movs	r3, #2
 8003972:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003974:	7dfb      	ldrb	r3, [r7, #23]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40026058 	.word	0x40026058
 8003984:	40026010 	.word	0x40026010
 8003988:	40026410 	.word	0x40026410
 800398c:	40026070 	.word	0x40026070
 8003990:	40026470 	.word	0x40026470
 8003994:	40026028 	.word	0x40026028
 8003998:	40026428 	.word	0x40026428
 800399c:	40026088 	.word	0x40026088
 80039a0:	40026488 	.word	0x40026488
 80039a4:	40026040 	.word	0x40026040
 80039a8:	40026440 	.word	0x40026440
 80039ac:	400260a0 	.word	0x400260a0
 80039b0:	400264a0 	.word	0x400264a0
 80039b4:	40026000 	.word	0x40026000

080039b8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d108      	bne.n	80039e8 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039e6:	e007      	b.n	80039f8 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e159      	b.n	8003cd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f040 8148 	bne.w	8003cce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d005      	beq.n	8003a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d130      	bne.n	8003ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0201 	and.w	r2, r3, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d017      	beq.n	8003af4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d123      	bne.n	8003b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	220f      	movs	r2, #15
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	69b9      	ldr	r1, [r7, #24]
 8003b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0203 	and.w	r2, r3, #3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a2 	beq.w	8003cce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b57      	ldr	r3, [pc, #348]	; (8003cec <HAL_GPIO_Init+0x2e8>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	4a56      	ldr	r2, [pc, #344]	; (8003cec <HAL_GPIO_Init+0x2e8>)
 8003b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b98:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9a:	4b54      	ldr	r3, [pc, #336]	; (8003cec <HAL_GPIO_Init+0x2e8>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba6:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_GPIO_Init+0x2ec>)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	3302      	adds	r3, #2
 8003bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a49      	ldr	r2, [pc, #292]	; (8003cf4 <HAL_GPIO_Init+0x2f0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d019      	beq.n	8003c06 <HAL_GPIO_Init+0x202>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a48      	ldr	r2, [pc, #288]	; (8003cf8 <HAL_GPIO_Init+0x2f4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_GPIO_Init+0x1fe>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a47      	ldr	r2, [pc, #284]	; (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00d      	beq.n	8003bfe <HAL_GPIO_Init+0x1fa>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a46      	ldr	r2, [pc, #280]	; (8003d00 <HAL_GPIO_Init+0x2fc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <HAL_GPIO_Init+0x1f6>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a45      	ldr	r2, [pc, #276]	; (8003d04 <HAL_GPIO_Init+0x300>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <HAL_GPIO_Init+0x1f2>
 8003bf2:	2304      	movs	r3, #4
 8003bf4:	e008      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003bf6:	2307      	movs	r3, #7
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e004      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e002      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003c06:	2300      	movs	r3, #0
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f002 0203 	and.w	r2, r2, #3
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	4093      	lsls	r3, r2
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c18:	4935      	ldr	r1, [pc, #212]	; (8003cf0 <HAL_GPIO_Init+0x2ec>)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	3302      	adds	r3, #2
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c26:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c4a:	4a2f      	ldr	r2, [pc, #188]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c50:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c74:	4a24      	ldr	r2, [pc, #144]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c7a:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca4:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc8:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	f67f aea2 	bls.w	8003a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3724      	adds	r7, #36	; 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40013800 	.word	0x40013800
 8003cf4:	40020000 	.word	0x40020000
 8003cf8:	40020400 	.word	0x40020400
 8003cfc:	40020800 	.word	0x40020800
 8003d00:	40020c00 	.word	0x40020c00
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40013c00 	.word	0x40013c00

08003d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d1c:	787b      	ldrb	r3, [r7, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d28:	e003      	b.n	8003d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	041a      	lsls	r2, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	619a      	str	r2, [r3, #24]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e264      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d075      	beq.n	8003e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5e:	4ba3      	ldr	r3, [pc, #652]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d00c      	beq.n	8003d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6a:	4ba0      	ldr	r3, [pc, #640]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d112      	bne.n	8003d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d76:	4b9d      	ldr	r3, [pc, #628]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d82:	d10b      	bne.n	8003d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	4b99      	ldr	r3, [pc, #612]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d05b      	beq.n	8003e48 <HAL_RCC_OscConfig+0x108>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d157      	bne.n	8003e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e23f      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d106      	bne.n	8003db4 <HAL_RCC_OscConfig+0x74>
 8003da6:	4b91      	ldr	r3, [pc, #580]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a90      	ldr	r2, [pc, #576]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e01d      	b.n	8003df0 <HAL_RCC_OscConfig+0xb0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x98>
 8003dbe:	4b8b      	ldr	r3, [pc, #556]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a8a      	ldr	r2, [pc, #552]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	4b88      	ldr	r3, [pc, #544]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a87      	ldr	r2, [pc, #540]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCC_OscConfig+0xb0>
 8003dd8:	4b84      	ldr	r3, [pc, #528]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a83      	ldr	r2, [pc, #524]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a80      	ldr	r2, [pc, #512]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d013      	beq.n	8003e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd fbcc 	bl	8001594 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd fbc8 	bl	8001594 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e204      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0xc0>
 8003e1e:	e014      	b.n	8003e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fd fbb8 	bl	8001594 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fd fbb4 	bl	8001594 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e1f0      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0xe8>
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d063      	beq.n	8003f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e56:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e62:	4b62      	ldr	r3, [pc, #392]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d11c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d116      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	4b5c      	ldr	r3, [pc, #368]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_RCC_OscConfig+0x152>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e1c4      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4952      	ldr	r1, [pc, #328]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	e03a      	b.n	8003f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb0:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <HAL_RCC_OscConfig+0x2b0>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fd fb6d 	bl	8001594 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ebe:	f7fd fb69 	bl	8001594 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e1a5      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	4b46      	ldr	r3, [pc, #280]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4940      	ldr	r1, [pc, #256]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
 8003ef0:	e015      	b.n	8003f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef2:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <HAL_RCC_OscConfig+0x2b0>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fb4c 	bl	8001594 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fd fb48 	bl	8001594 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e184      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d030      	beq.n	8003f8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d016      	beq.n	8003f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f32:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <HAL_RCC_OscConfig+0x2b4>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fd fb2c 	bl	8001594 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fd fb28 	bl	8001594 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e164      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	4b26      	ldr	r3, [pc, #152]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x200>
 8003f5e:	e015      	b.n	8003f8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_OscConfig+0x2b4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f66:	f7fd fb15 	bl	8001594 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6e:	f7fd fb11 	bl	8001594 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e14d      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a0 	beq.w	80040da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9e:	4b13      	ldr	r3, [pc, #76]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10f      	bne.n	8003fca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_OscConfig+0x2b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d121      	bne.n	800401a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_RCC_OscConfig+0x2b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <HAL_RCC_OscConfig+0x2b8>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fd fad7 	bl	8001594 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	e011      	b.n	800400e <HAL_RCC_OscConfig+0x2ce>
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	42470000 	.word	0x42470000
 8003ff4:	42470e80 	.word	0x42470e80
 8003ff8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fd faca 	bl	8001594 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e106      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	4b85      	ldr	r3, [pc, #532]	; (8004224 <HAL_RCC_OscConfig+0x4e4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d106      	bne.n	8004030 <HAL_RCC_OscConfig+0x2f0>
 8004022:	4b81      	ldr	r3, [pc, #516]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	4a80      	ldr	r2, [pc, #512]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6713      	str	r3, [r2, #112]	; 0x70
 800402e:	e01c      	b.n	800406a <HAL_RCC_OscConfig+0x32a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b05      	cmp	r3, #5
 8004036:	d10c      	bne.n	8004052 <HAL_RCC_OscConfig+0x312>
 8004038:	4b7b      	ldr	r3, [pc, #492]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a7a      	ldr	r2, [pc, #488]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
 8004044:	4b78      	ldr	r3, [pc, #480]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a77      	ldr	r2, [pc, #476]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
 8004050:	e00b      	b.n	800406a <HAL_RCC_OscConfig+0x32a>
 8004052:	4b75      	ldr	r3, [pc, #468]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a74      	ldr	r2, [pc, #464]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
 800405e:	4b72      	ldr	r3, [pc, #456]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	4a71      	ldr	r2, [pc, #452]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d015      	beq.n	800409e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004072:	f7fd fa8f 	bl	8001594 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	e00a      	b.n	8004090 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fd fa8b 	bl	8001594 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	; 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e0c5      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004090:	4b65      	ldr	r3, [pc, #404]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ee      	beq.n	800407a <HAL_RCC_OscConfig+0x33a>
 800409c:	e014      	b.n	80040c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409e:	f7fd fa79 	bl	8001594 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fd fa75 	bl	8001594 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0af      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040bc:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ee      	bne.n	80040a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d105      	bne.n	80040da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ce:	4b56      	ldr	r3, [pc, #344]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4a55      	ldr	r2, [pc, #340]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 809b 	beq.w	800421a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d05c      	beq.n	80041aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d141      	bne.n	800417c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b4c      	ldr	r3, [pc, #304]	; (800422c <HAL_RCC_OscConfig+0x4ec>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fd fa49 	bl	8001594 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004106:	f7fd fa45 	bl	8001594 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e081      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004118:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	019b      	lsls	r3, r3, #6
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	3b01      	subs	r3, #1
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	4937      	ldr	r1, [pc, #220]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414e:	4b37      	ldr	r3, [pc, #220]	; (800422c <HAL_RCC_OscConfig+0x4ec>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd fa1e 	bl	8001594 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd fa1a 	bl	8001594 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e056      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x41c>
 800417a:	e04e      	b.n	800421a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCC_OscConfig+0x4ec>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004182:	f7fd fa07 	bl	8001594 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418a:	f7fd fa03 	bl	8001594 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e03f      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f0      	bne.n	800418a <HAL_RCC_OscConfig+0x44a>
 80041a8:	e037      	b.n	800421a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e032      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d028      	beq.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d121      	bne.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d11a      	bne.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041e6:	4013      	ands	r3, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d111      	bne.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	3b01      	subs	r3, #1
 8004200:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d107      	bne.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40007000 	.word	0x40007000
 8004228:	40023800 	.word	0x40023800
 800422c:	42470060 	.word	0x42470060

08004230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0cc      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004244:	4b68      	ldr	r3, [pc, #416]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d90c      	bls.n	800426c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b65      	ldr	r3, [pc, #404]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	4b63      	ldr	r3, [pc, #396]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0b8      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004284:	4b59      	ldr	r3, [pc, #356]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a58      	ldr	r2, [pc, #352]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800428e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800429c:	4b53      	ldr	r3, [pc, #332]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4a52      	ldr	r2, [pc, #328]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a8:	4b50      	ldr	r3, [pc, #320]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	494d      	ldr	r1, [pc, #308]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d044      	beq.n	8004350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b47      	ldr	r3, [pc, #284]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d119      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e07f      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ee:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e06f      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fe:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e067      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430e:	4b37      	ldr	r3, [pc, #220]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f023 0203 	bic.w	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4934      	ldr	r1, [pc, #208]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	4313      	orrs	r3, r2
 800431e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004320:	f7fd f938 	bl	8001594 <HAL_GetTick>
 8004324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	e00a      	b.n	800433e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004328:	f7fd f934 	bl	8001594 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e04f      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 020c 	and.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	429a      	cmp	r2, r3
 800434e:	d1eb      	bne.n	8004328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d20c      	bcs.n	8004378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e032      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4916      	ldr	r1, [pc, #88]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	490e      	ldr	r1, [pc, #56]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043b6:	f000 f821 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80043ba:	4602      	mov	r2, r0
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	490a      	ldr	r1, [pc, #40]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	5ccb      	ldrb	r3, [r1, r3]
 80043ca:	fa22 f303 	lsr.w	r3, r2, r3
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fd f898 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023c00 	.word	0x40023c00
 80043ec:	40023800 	.word	0x40023800
 80043f0:	08005f1c 	.word	0x08005f1c
 80043f4:	20000000 	.word	0x20000000
 80043f8:	20000004 	.word	0x20000004

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	2300      	movs	r3, #0
 800440e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004414:	4b67      	ldr	r3, [pc, #412]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
 800441c:	2b08      	cmp	r3, #8
 800441e:	d00d      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0x40>
 8004420:	2b08      	cmp	r3, #8
 8004422:	f200 80bd 	bhi.w	80045a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x34>
 800442a:	2b04      	cmp	r3, #4
 800442c:	d003      	beq.n	8004436 <HAL_RCC_GetSysClockFreq+0x3a>
 800442e:	e0b7      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004430:	4b61      	ldr	r3, [pc, #388]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004432:	60bb      	str	r3, [r7, #8]
       break;
 8004434:	e0b7      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004436:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004438:	60bb      	str	r3, [r7, #8]
      break;
 800443a:	e0b4      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800443c:	4b5d      	ldr	r3, [pc, #372]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004444:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004446:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d04d      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004452:	4b58      	ldr	r3, [pc, #352]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	461a      	mov	r2, r3
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	ea02 0800 	and.w	r8, r2, r0
 800446a:	ea03 0901 	and.w	r9, r3, r1
 800446e:	4640      	mov	r0, r8
 8004470:	4649      	mov	r1, r9
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	014b      	lsls	r3, r1, #5
 800447c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004480:	0142      	lsls	r2, r0, #5
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	ebb0 0008 	subs.w	r0, r0, r8
 800448a:	eb61 0109 	sbc.w	r1, r1, r9
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	018b      	lsls	r3, r1, #6
 8004498:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800449c:	0182      	lsls	r2, r0, #6
 800449e:	1a12      	subs	r2, r2, r0
 80044a0:	eb63 0301 	sbc.w	r3, r3, r1
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	00d9      	lsls	r1, r3, #3
 80044ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044b2:	00d0      	lsls	r0, r2, #3
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	eb12 0208 	adds.w	r2, r2, r8
 80044bc:	eb43 0309 	adc.w	r3, r3, r9
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	0259      	lsls	r1, r3, #9
 80044ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044ce:	0250      	lsls	r0, r2, #9
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	461a      	mov	r2, r3
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	f7fb fe78 	bl	80001d4 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4613      	mov	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e04a      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	099b      	lsrs	r3, r3, #6
 80044f4:	461a      	mov	r2, r3
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	ea02 0400 	and.w	r4, r2, r0
 8004506:	ea03 0501 	and.w	r5, r3, r1
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	014b      	lsls	r3, r1, #5
 8004518:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800451c:	0142      	lsls	r2, r0, #5
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	1b00      	subs	r0, r0, r4
 8004524:	eb61 0105 	sbc.w	r1, r1, r5
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	018b      	lsls	r3, r1, #6
 8004532:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004536:	0182      	lsls	r2, r0, #6
 8004538:	1a12      	subs	r2, r2, r0
 800453a:	eb63 0301 	sbc.w	r3, r3, r1
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	00d9      	lsls	r1, r3, #3
 8004548:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800454c:	00d0      	lsls	r0, r2, #3
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	1912      	adds	r2, r2, r4
 8004554:	eb45 0303 	adc.w	r3, r5, r3
 8004558:	f04f 0000 	mov.w	r0, #0
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	0299      	lsls	r1, r3, #10
 8004562:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004566:	0290      	lsls	r0, r2, #10
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	461a      	mov	r2, r3
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	f7fb fe2c 	bl	80001d4 <__aeabi_uldivmod>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4613      	mov	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	3301      	adds	r3, #1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	60bb      	str	r3, [r7, #8]
      break;
 800459e:	e002      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045a2:	60bb      	str	r3, [r7, #8]
      break;
 80045a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a6:	68bb      	ldr	r3, [r7, #8]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800
 80045b8:	00f42400 	.word	0x00f42400
 80045bc:	007a1200 	.word	0x007a1200

080045c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000000 	.word	0x20000000

080045d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045dc:	f7ff fff0 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	0a9b      	lsrs	r3, r3, #10
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4903      	ldr	r1, [pc, #12]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	08005f2c 	.word	0x08005f2c

08004600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004604:	f7ff ffdc 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0b5b      	lsrs	r3, r3, #13
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	08005f2c 	.word	0x08005f2c

08004628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e07b      	b.n	8004732 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464a:	d009      	beq.n	8004660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	61da      	str	r2, [r3, #28]
 8004652:	e005      	b.n	8004660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc f972 	bl	8000964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004696:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	ea42 0103 	orr.w	r1, r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	f003 0104 	and.w	r1, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0210 	and.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004720:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e041      	b.n	80047d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fc fb2d 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3304      	adds	r3, #4
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f000 fc19 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d001      	beq.n	80047f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e03c      	b.n	800486a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <HAL_TIM_Base_Start+0xa0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <HAL_TIM_Base_Start+0x5c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d013      	beq.n	8004834 <HAL_TIM_Base_Start+0x5c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1a      	ldr	r2, [pc, #104]	; (800487c <HAL_TIM_Base_Start+0xa4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_TIM_Base_Start+0x5c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a19      	ldr	r2, [pc, #100]	; (8004880 <HAL_TIM_Base_Start+0xa8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_TIM_Base_Start+0x5c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a17      	ldr	r2, [pc, #92]	; (8004884 <HAL_TIM_Base_Start+0xac>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIM_Base_Start+0x5c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a16      	ldr	r2, [pc, #88]	; (8004888 <HAL_TIM_Base_Start+0xb0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d111      	bne.n	8004858 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d010      	beq.n	8004868 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	e007      	b.n	8004868 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40014000 	.word	0x40014000

0800488c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e041      	b.n	8004922 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f839 	bl	800492a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 fb70 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d109      	bne.n	8004964 <HAL_TIM_OC_Start+0x24>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e022      	b.n	80049aa <HAL_TIM_OC_Start+0x6a>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b04      	cmp	r3, #4
 8004968:	d109      	bne.n	800497e <HAL_TIM_OC_Start+0x3e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e015      	b.n	80049aa <HAL_TIM_OC_Start+0x6a>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d109      	bne.n	8004998 <HAL_TIM_OC_Start+0x58>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e008      	b.n	80049aa <HAL_TIM_OC_Start+0x6a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e068      	b.n	8004a84 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_OC_Start+0x82>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c0:	e013      	b.n	80049ea <HAL_TIM_OC_Start+0xaa>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_OC_Start+0x92>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d0:	e00b      	b.n	80049ea <HAL_TIM_OC_Start+0xaa>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_OC_Start+0xa2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e0:	e003      	b.n	80049ea <HAL_TIM_OC_Start+0xaa>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2201      	movs	r2, #1
 80049f0:	6839      	ldr	r1, [r7, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fd82 	bl	80054fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a23      	ldr	r2, [pc, #140]	; (8004a8c <HAL_TIM_OC_Start+0x14c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d107      	bne.n	8004a12 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <HAL_TIM_OC_Start+0x14c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_TIM_OC_Start+0x10e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a24:	d013      	beq.n	8004a4e <HAL_TIM_OC_Start+0x10e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a19      	ldr	r2, [pc, #100]	; (8004a90 <HAL_TIM_OC_Start+0x150>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIM_OC_Start+0x10e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <HAL_TIM_OC_Start+0x154>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_TIM_OC_Start+0x10e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <HAL_TIM_OC_Start+0x158>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIM_OC_Start+0x10e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <HAL_TIM_OC_Start+0x15c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d111      	bne.n	8004a72 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b06      	cmp	r3, #6
 8004a5e:	d010      	beq.n	8004a82 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a70:	e007      	b.n	8004a82 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800
 8004a98:	40000c00 	.word	0x40000c00
 8004a9c:	40014000 	.word	0x40014000

08004aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e041      	b.n	8004b36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f839 	bl	8004b3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f000 fa66 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_OC_ConfigChannel+0x1a>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e046      	b.n	8004bfc <HAL_TIM_OC_ConfigChannel+0xa8>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b0c      	cmp	r3, #12
 8004b7a:	d839      	bhi.n	8004bf0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004bb9 	.word	0x08004bb9
 8004b88:	08004bf1 	.word	0x08004bf1
 8004b8c:	08004bf1 	.word	0x08004bf1
 8004b90:	08004bf1 	.word	0x08004bf1
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bf1 	.word	0x08004bf1
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004bf1 	.word	0x08004bf1
 8004ba4:	08004bd5 	.word	0x08004bd5
 8004ba8:	08004bf1 	.word	0x08004bf1
 8004bac:	08004bf1 	.word	0x08004bf1
 8004bb0:	08004bf1 	.word	0x08004bf1
 8004bb4:	08004be3 	.word	0x08004be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fa76 	bl	80050b0 <TIM_OC1_SetConfig>
      break;
 8004bc4:	e015      	b.n	8004bf2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fad5 	bl	800517c <TIM_OC2_SetConfig>
      break;
 8004bd2:	e00e      	b.n	8004bf2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fb3a 	bl	8005254 <TIM_OC3_SetConfig>
      break;
 8004be0:	e007      	b.n	8004bf2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fb9d 	bl	8005328 <TIM_OC4_SetConfig>
      break;
 8004bee:	e000      	b.n	8004bf2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004bf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0ac      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	f200 809f 	bhi.w	8004d6c <HAL_TIM_PWM_ConfigChannel+0x168>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004d6d 	.word	0x08004d6d
 8004c3c:	08004d6d 	.word	0x08004d6d
 8004c40:	08004d6d 	.word	0x08004d6d
 8004c44:	08004ca9 	.word	0x08004ca9
 8004c48:	08004d6d 	.word	0x08004d6d
 8004c4c:	08004d6d 	.word	0x08004d6d
 8004c50:	08004d6d 	.word	0x08004d6d
 8004c54:	08004ceb 	.word	0x08004ceb
 8004c58:	08004d6d 	.word	0x08004d6d
 8004c5c:	08004d6d 	.word	0x08004d6d
 8004c60:	08004d6d 	.word	0x08004d6d
 8004c64:	08004d2b 	.word	0x08004d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fa1e 	bl	80050b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0208 	orr.w	r2, r2, #8
 8004c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0204 	bic.w	r2, r2, #4
 8004c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6999      	ldr	r1, [r3, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	619a      	str	r2, [r3, #24]
      break;
 8004ca6:	e062      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fa64 	bl	800517c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	021a      	lsls	r2, r3, #8
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]
      break;
 8004ce8:	e041      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 faaf 	bl	8005254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0208 	orr.w	r2, r2, #8
 8004d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0204 	bic.w	r2, r2, #4
 8004d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69d9      	ldr	r1, [r3, #28]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	61da      	str	r2, [r3, #28]
      break;
 8004d28:	e021      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 faf9 	bl	8005328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	021a      	lsls	r2, r3, #8
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	61da      	str	r2, [r3, #28]
      break;
 8004d6a:	e000      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004d6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_TIM_ConfigClockSource+0x18>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e0b3      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x180>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd0:	d03e      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0xd0>
 8004dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd6:	f200 8087 	bhi.w	8004ee8 <HAL_TIM_ConfigClockSource+0x168>
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	f000 8085 	beq.w	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	d87f      	bhi.n	8004ee8 <HAL_TIM_ConfigClockSource+0x168>
 8004de8:	2b70      	cmp	r3, #112	; 0x70
 8004dea:	d01a      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0xa2>
 8004dec:	2b70      	cmp	r3, #112	; 0x70
 8004dee:	d87b      	bhi.n	8004ee8 <HAL_TIM_ConfigClockSource+0x168>
 8004df0:	2b60      	cmp	r3, #96	; 0x60
 8004df2:	d050      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x116>
 8004df4:	2b60      	cmp	r3, #96	; 0x60
 8004df6:	d877      	bhi.n	8004ee8 <HAL_TIM_ConfigClockSource+0x168>
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d03c      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0xf6>
 8004dfc:	2b50      	cmp	r3, #80	; 0x50
 8004dfe:	d873      	bhi.n	8004ee8 <HAL_TIM_ConfigClockSource+0x168>
 8004e00:	2b40      	cmp	r3, #64	; 0x40
 8004e02:	d058      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x136>
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d86f      	bhi.n	8004ee8 <HAL_TIM_ConfigClockSource+0x168>
 8004e08:	2b30      	cmp	r3, #48	; 0x30
 8004e0a:	d064      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x156>
 8004e0c:	2b30      	cmp	r3, #48	; 0x30
 8004e0e:	d86b      	bhi.n	8004ee8 <HAL_TIM_ConfigClockSource+0x168>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d060      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x156>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d867      	bhi.n	8004ee8 <HAL_TIM_ConfigClockSource+0x168>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d05c      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x156>
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d05a      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e20:	e062      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6899      	ldr	r1, [r3, #8]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f000 fb43 	bl	80054bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	609a      	str	r2, [r3, #8]
      break;
 8004e4e:	e04e      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	6899      	ldr	r1, [r3, #8]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f000 fb2c 	bl	80054bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e72:	609a      	str	r2, [r3, #8]
      break;
 8004e74:	e03b      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f000 faa0 	bl	80053c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2150      	movs	r1, #80	; 0x50
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 faf9 	bl	8005486 <TIM_ITRx_SetConfig>
      break;
 8004e94:	e02b      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 fabf 	bl	8005426 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2160      	movs	r1, #96	; 0x60
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fae9 	bl	8005486 <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e01b      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 fa80 	bl	80053c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2140      	movs	r1, #64	; 0x40
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fad9 	bl	8005486 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e00b      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f000 fad0 	bl	8005486 <TIM_ITRx_SetConfig>
        break;
 8004ee6:	e002      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004eec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d107      	bne.n	8004f44 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f42:	e02a      	b.n	8004f9a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d107      	bne.n	8004f5e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2202      	movs	r2, #2
 8004f52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f5c:	e01d      	b.n	8004f9a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d107      	bne.n	8004f78 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f76:	e010      	b.n	8004f9a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d107      	bne.n	8004f92 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2208      	movs	r2, #8
 8004f86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f90:	e003      	b.n	8004f9a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7ff ffb4 	bl	8004f08 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	771a      	strb	r2, [r3, #28]
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a34      	ldr	r2, [pc, #208]	; (8005094 <TIM_Base_SetConfig+0xe4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_Base_SetConfig+0x38>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fce:	d00b      	beq.n	8004fe8 <TIM_Base_SetConfig+0x38>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a31      	ldr	r2, [pc, #196]	; (8005098 <TIM_Base_SetConfig+0xe8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_Base_SetConfig+0x38>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a30      	ldr	r2, [pc, #192]	; (800509c <TIM_Base_SetConfig+0xec>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0x38>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a2f      	ldr	r2, [pc, #188]	; (80050a0 <TIM_Base_SetConfig+0xf0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d108      	bne.n	8004ffa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a25      	ldr	r2, [pc, #148]	; (8005094 <TIM_Base_SetConfig+0xe4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01b      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d017      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a22      	ldr	r2, [pc, #136]	; (8005098 <TIM_Base_SetConfig+0xe8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a21      	ldr	r2, [pc, #132]	; (800509c <TIM_Base_SetConfig+0xec>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a20      	ldr	r2, [pc, #128]	; (80050a0 <TIM_Base_SetConfig+0xf0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1f      	ldr	r2, [pc, #124]	; (80050a4 <TIM_Base_SetConfig+0xf4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1e      	ldr	r2, [pc, #120]	; (80050a8 <TIM_Base_SetConfig+0xf8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <TIM_Base_SetConfig+0xfc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a08      	ldr	r2, [pc, #32]	; (8005094 <TIM_Base_SetConfig+0xe4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d103      	bne.n	8005080 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	615a      	str	r2, [r3, #20]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800

080050b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0201 	bic.w	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0302 	bic.w	r3, r3, #2
 80050f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <TIM_OC1_SetConfig+0xc8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10c      	bne.n	8005126 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0308 	bic.w	r3, r3, #8
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a13      	ldr	r2, [pc, #76]	; (8005178 <TIM_OC1_SetConfig+0xc8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d111      	bne.n	8005152 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40010000 	.word	0x40010000

0800517c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f023 0210 	bic.w	r2, r3, #16
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0320 	bic.w	r3, r3, #32
 80051c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <TIM_OC2_SetConfig+0xd4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10d      	bne.n	80051f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a15      	ldr	r2, [pc, #84]	; (8005250 <TIM_OC2_SetConfig+0xd4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d113      	bne.n	8005228 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000

08005254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800529c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <TIM_OC3_SetConfig+0xd0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10d      	bne.n	80052ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a14      	ldr	r2, [pc, #80]	; (8005324 <TIM_OC3_SetConfig+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d113      	bne.n	80052fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40010000 	.word	0x40010000

08005328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	031b      	lsls	r3, r3, #12
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a10      	ldr	r2, [pc, #64]	; (80053c4 <TIM_OC4_SetConfig+0x9c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d109      	bne.n	800539c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800538e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	019b      	lsls	r3, r3, #6
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000

080053c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f023 0201 	bic.w	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 030a 	bic.w	r3, r3, #10
 8005404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	bf00      	nop
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005426:	b480      	push	{r7}
 8005428:	b087      	sub	sp, #28
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0210 	bic.w	r2, r3, #16
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	031b      	lsls	r3, r3, #12
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f043 0307 	orr.w	r3, r3, #7
 80054a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	021a      	lsls	r2, r3, #8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	431a      	orrs	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	609a      	str	r2, [r3, #8]
}
 80054f0:	bf00      	nop
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	2201      	movs	r2, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	43db      	mvns	r3, r3
 800551e:	401a      	ands	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	431a      	orrs	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800555c:	2302      	movs	r3, #2
 800555e:	e050      	b.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d018      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ac:	d013      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a16      	ldr	r2, [pc, #88]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d009      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a15      	ldr	r2, [pc, #84]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a13      	ldr	r2, [pc, #76]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10c      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800
 800561c:	40000c00 	.word	0x40000c00
 8005620:	40014000 	.word	0x40014000

08005624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800563c:	2302      	movs	r3, #2
 800563e:	e03d      	b.n	80056bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e03f      	b.n	800575a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fb fc3e 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2224      	movs	r2, #36	; 0x24
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800570a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f829 	bl	8005764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695a      	ldr	r2, [r3, #20]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005768:	b09f      	sub	sp, #124	; 0x7c
 800576a:	af00      	add	r7, sp, #0
 800576c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	68d9      	ldr	r1, [r3, #12]
 800577c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	ea40 0301 	orr.w	r3, r0, r1
 8005784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	431a      	orrs	r2, r3
 8005790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	431a      	orrs	r2, r3
 8005796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	4313      	orrs	r3, r2
 800579c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057a8:	f021 010c 	bic.w	r1, r1, #12
 80057ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057b2:	430b      	orrs	r3, r1
 80057b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c2:	6999      	ldr	r1, [r3, #24]
 80057c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	ea40 0301 	orr.w	r3, r0, r1
 80057cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4bc5      	ldr	r3, [pc, #788]	; (8005ae8 <UART_SetConfig+0x384>)
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d004      	beq.n	80057e2 <UART_SetConfig+0x7e>
 80057d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4bc3      	ldr	r3, [pc, #780]	; (8005aec <UART_SetConfig+0x388>)
 80057de:	429a      	cmp	r2, r3
 80057e0:	d103      	bne.n	80057ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057e2:	f7fe ff0d 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 80057e6:	6778      	str	r0, [r7, #116]	; 0x74
 80057e8:	e002      	b.n	80057f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ea:	f7fe fef5 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 80057ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f8:	f040 80b6 	bne.w	8005968 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fe:	461c      	mov	r4, r3
 8005800:	f04f 0500 	mov.w	r5, #0
 8005804:	4622      	mov	r2, r4
 8005806:	462b      	mov	r3, r5
 8005808:	1891      	adds	r1, r2, r2
 800580a:	6439      	str	r1, [r7, #64]	; 0x40
 800580c:	415b      	adcs	r3, r3
 800580e:	647b      	str	r3, [r7, #68]	; 0x44
 8005810:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005814:	1912      	adds	r2, r2, r4
 8005816:	eb45 0303 	adc.w	r3, r5, r3
 800581a:	f04f 0000 	mov.w	r0, #0
 800581e:	f04f 0100 	mov.w	r1, #0
 8005822:	00d9      	lsls	r1, r3, #3
 8005824:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005828:	00d0      	lsls	r0, r2, #3
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	1911      	adds	r1, r2, r4
 8005830:	6639      	str	r1, [r7, #96]	; 0x60
 8005832:	416b      	adcs	r3, r5
 8005834:	667b      	str	r3, [r7, #100]	; 0x64
 8005836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	461a      	mov	r2, r3
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	1891      	adds	r1, r2, r2
 8005842:	63b9      	str	r1, [r7, #56]	; 0x38
 8005844:	415b      	adcs	r3, r3
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800584c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005850:	f7fa fcc0 	bl	80001d4 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4ba5      	ldr	r3, [pc, #660]	; (8005af0 <UART_SetConfig+0x38c>)
 800585a:	fba3 2302 	umull	r2, r3, r3, r2
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	011e      	lsls	r6, r3, #4
 8005862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005864:	461c      	mov	r4, r3
 8005866:	f04f 0500 	mov.w	r5, #0
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	1891      	adds	r1, r2, r2
 8005870:	6339      	str	r1, [r7, #48]	; 0x30
 8005872:	415b      	adcs	r3, r3
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
 8005876:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800587a:	1912      	adds	r2, r2, r4
 800587c:	eb45 0303 	adc.w	r3, r5, r3
 8005880:	f04f 0000 	mov.w	r0, #0
 8005884:	f04f 0100 	mov.w	r1, #0
 8005888:	00d9      	lsls	r1, r3, #3
 800588a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800588e:	00d0      	lsls	r0, r2, #3
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	1911      	adds	r1, r2, r4
 8005896:	65b9      	str	r1, [r7, #88]	; 0x58
 8005898:	416b      	adcs	r3, r5
 800589a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800589c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	461a      	mov	r2, r3
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	1891      	adds	r1, r2, r2
 80058a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80058aa:	415b      	adcs	r3, r3
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80058b6:	f7fa fc8d 	bl	80001d4 <__aeabi_uldivmod>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4b8c      	ldr	r3, [pc, #560]	; (8005af0 <UART_SetConfig+0x38c>)
 80058c0:	fba3 1302 	umull	r1, r3, r3, r2
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	2164      	movs	r1, #100	; 0x64
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	3332      	adds	r3, #50	; 0x32
 80058d2:	4a87      	ldr	r2, [pc, #540]	; (8005af0 <UART_SetConfig+0x38c>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058e0:	441e      	add	r6, r3
 80058e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e4:	4618      	mov	r0, r3
 80058e6:	f04f 0100 	mov.w	r1, #0
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	1894      	adds	r4, r2, r2
 80058f0:	623c      	str	r4, [r7, #32]
 80058f2:	415b      	adcs	r3, r3
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
 80058f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058fa:	1812      	adds	r2, r2, r0
 80058fc:	eb41 0303 	adc.w	r3, r1, r3
 8005900:	f04f 0400 	mov.w	r4, #0
 8005904:	f04f 0500 	mov.w	r5, #0
 8005908:	00dd      	lsls	r5, r3, #3
 800590a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800590e:	00d4      	lsls	r4, r2, #3
 8005910:	4622      	mov	r2, r4
 8005912:	462b      	mov	r3, r5
 8005914:	1814      	adds	r4, r2, r0
 8005916:	653c      	str	r4, [r7, #80]	; 0x50
 8005918:	414b      	adcs	r3, r1
 800591a:	657b      	str	r3, [r7, #84]	; 0x54
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	461a      	mov	r2, r3
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	1891      	adds	r1, r2, r2
 8005928:	61b9      	str	r1, [r7, #24]
 800592a:	415b      	adcs	r3, r3
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005932:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005936:	f7fa fc4d 	bl	80001d4 <__aeabi_uldivmod>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4b6c      	ldr	r3, [pc, #432]	; (8005af0 <UART_SetConfig+0x38c>)
 8005940:	fba3 1302 	umull	r1, r3, r3, r2
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	2164      	movs	r1, #100	; 0x64
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	3332      	adds	r3, #50	; 0x32
 8005952:	4a67      	ldr	r2, [pc, #412]	; (8005af0 <UART_SetConfig+0x38c>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f003 0207 	and.w	r2, r3, #7
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4432      	add	r2, r6
 8005964:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005966:	e0b9      	b.n	8005adc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800596a:	461c      	mov	r4, r3
 800596c:	f04f 0500 	mov.w	r5, #0
 8005970:	4622      	mov	r2, r4
 8005972:	462b      	mov	r3, r5
 8005974:	1891      	adds	r1, r2, r2
 8005976:	6139      	str	r1, [r7, #16]
 8005978:	415b      	adcs	r3, r3
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005980:	1912      	adds	r2, r2, r4
 8005982:	eb45 0303 	adc.w	r3, r5, r3
 8005986:	f04f 0000 	mov.w	r0, #0
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	00d9      	lsls	r1, r3, #3
 8005990:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005994:	00d0      	lsls	r0, r2, #3
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	eb12 0804 	adds.w	r8, r2, r4
 800599e:	eb43 0905 	adc.w	r9, r3, r5
 80059a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f04f 0100 	mov.w	r1, #0
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	008b      	lsls	r3, r1, #2
 80059b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059ba:	0082      	lsls	r2, r0, #2
 80059bc:	4640      	mov	r0, r8
 80059be:	4649      	mov	r1, r9
 80059c0:	f7fa fc08 	bl	80001d4 <__aeabi_uldivmod>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4b49      	ldr	r3, [pc, #292]	; (8005af0 <UART_SetConfig+0x38c>)
 80059ca:	fba3 2302 	umull	r2, r3, r3, r2
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	011e      	lsls	r6, r3, #4
 80059d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d4:	4618      	mov	r0, r3
 80059d6:	f04f 0100 	mov.w	r1, #0
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	1894      	adds	r4, r2, r2
 80059e0:	60bc      	str	r4, [r7, #8]
 80059e2:	415b      	adcs	r3, r3
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ea:	1812      	adds	r2, r2, r0
 80059ec:	eb41 0303 	adc.w	r3, r1, r3
 80059f0:	f04f 0400 	mov.w	r4, #0
 80059f4:	f04f 0500 	mov.w	r5, #0
 80059f8:	00dd      	lsls	r5, r3, #3
 80059fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059fe:	00d4      	lsls	r4, r2, #3
 8005a00:	4622      	mov	r2, r4
 8005a02:	462b      	mov	r3, r5
 8005a04:	1814      	adds	r4, r2, r0
 8005a06:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a08:	414b      	adcs	r3, r1
 8005a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f04f 0100 	mov.w	r1, #0
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	008b      	lsls	r3, r1, #2
 8005a20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a24:	0082      	lsls	r2, r0, #2
 8005a26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a2a:	f7fa fbd3 	bl	80001d4 <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4b2f      	ldr	r3, [pc, #188]	; (8005af0 <UART_SetConfig+0x38c>)
 8005a34:	fba3 1302 	umull	r1, r3, r3, r2
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	2164      	movs	r1, #100	; 0x64
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	3332      	adds	r3, #50	; 0x32
 8005a46:	4a2a      	ldr	r2, [pc, #168]	; (8005af0 <UART_SetConfig+0x38c>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a52:	441e      	add	r6, r3
 8005a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a56:	4618      	mov	r0, r3
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	1894      	adds	r4, r2, r2
 8005a62:	603c      	str	r4, [r7, #0]
 8005a64:	415b      	adcs	r3, r3
 8005a66:	607b      	str	r3, [r7, #4]
 8005a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a6c:	1812      	adds	r2, r2, r0
 8005a6e:	eb41 0303 	adc.w	r3, r1, r3
 8005a72:	f04f 0400 	mov.w	r4, #0
 8005a76:	f04f 0500 	mov.w	r5, #0
 8005a7a:	00dd      	lsls	r5, r3, #3
 8005a7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a80:	00d4      	lsls	r4, r2, #3
 8005a82:	4622      	mov	r2, r4
 8005a84:	462b      	mov	r3, r5
 8005a86:	eb12 0a00 	adds.w	sl, r2, r0
 8005a8a:	eb43 0b01 	adc.w	fp, r3, r1
 8005a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f04f 0100 	mov.w	r1, #0
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	f04f 0300 	mov.w	r3, #0
 8005aa0:	008b      	lsls	r3, r1, #2
 8005aa2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005aa6:	0082      	lsls	r2, r0, #2
 8005aa8:	4650      	mov	r0, sl
 8005aaa:	4659      	mov	r1, fp
 8005aac:	f7fa fb92 	bl	80001d4 <__aeabi_uldivmod>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <UART_SetConfig+0x38c>)
 8005ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	2164      	movs	r1, #100	; 0x64
 8005abe:	fb01 f303 	mul.w	r3, r1, r3
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	3332      	adds	r3, #50	; 0x32
 8005ac8:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <UART_SetConfig+0x38c>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4432      	add	r2, r6
 8005ada:	609a      	str	r2, [r3, #8]
}
 8005adc:	bf00      	nop
 8005ade:	377c      	adds	r7, #124	; 0x7c
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40011000 	.word	0x40011000
 8005aec:	40011400 	.word	0x40011400
 8005af0:	51eb851f 	.word	0x51eb851f

08005af4 <ADC_Init>:

#define ADC_BUFF_SIZE 1

uint16_t adc_0_buff[ADC_BUFF_SIZE];

void ADC_Init(TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
	// enable the specified TIM peripheral
  HAL_TIM_Base_Start(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fe fe6a 	bl	80047d8 <HAL_TIM_Base_Start>

  // enable DSS which allows DMA to start over upon each conversion
  hadc->Instance->CR2 |= ADC_CR2_DDS;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b12:	609a      	str	r2, [r3, #8]

  // enable the ADC peripheral, 
  // configure the DMA stream hooked up to the ADC, 
  // then, enable the DMA peripheral
  HAL_ADC_Start_DMA(hadc, (uint32_t *) &adc_0_buff, 1);
 8005b14:	2201      	movs	r2, #1
 8005b16:	4904      	ldr	r1, [pc, #16]	; (8005b28 <ADC_Init+0x34>)
 8005b18:	6838      	ldr	r0, [r7, #0]
 8005b1a:	f7fb fd8b 	bl	8001634 <HAL_ADC_Start_DMA>
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200002cc 	.word	0x200002cc

08005b2c <ADC_queue_pop>:


uint16_t ADC_queue_pop() {
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
	return adc_0_buff[0];
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <ADC_queue_pop+0x14>)
 8005b32:	881b      	ldrh	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	200002cc 	.word	0x200002cc

08005b44 <HAL_ADC_ConvCpltCallback>:

 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <DAC_Init>:
uint8_t M1_buff[DAC_MEM_BUFF_SIZE];

uint8_t *sample_queue;
uint16_t dac_queue_size_bytes;

void DAC_Init(TIM_HandleTypeDef *htim, SPI_HandleTypeDef *hspi, DMA_HandleTypeDef *hdma_tim) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]

	// zero-fill the DAC buffers
	for (int i = 0; i < DAC_MEM_BUFF_SIZE; i++) {
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e00c      	b.n	8005b84 <DAC_Init+0x2c>
		M0_buff[i] = 0x00;
 8005b6a:	4a35      	ldr	r2, [pc, #212]	; (8005c40 <DAC_Init+0xe8>)
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4413      	add	r3, r2
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
		M1_buff[i] = 0x00;
 8005b74:	4a33      	ldr	r2, [pc, #204]	; (8005c44 <DAC_Init+0xec>)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	4413      	add	r3, r2
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < DAC_MEM_BUFF_SIZE; i++) {
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	3301      	adds	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b8f      	cmp	r3, #143	; 0x8f
 8005b88:	ddef      	ble.n	8005b6a <DAC_Init+0x12>
	}

	sample_queue = (uint8_t *) M1_buff;
 8005b8a:	4b2f      	ldr	r3, [pc, #188]	; (8005c48 <DAC_Init+0xf0>)
 8005b8c:	4a2d      	ldr	r2, [pc, #180]	; (8005c44 <DAC_Init+0xec>)
 8005b8e:	601a      	str	r2, [r3, #0]

	// enable the SPI2 peripheral
	__HAL_SPI_ENABLE(hspi);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b9e:	601a      	str	r2, [r3, #0]

	// enable DMA request for TIM1_CH1,2,3,4
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bae:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bbe:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bce:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bde:	60da      	str	r2, [r3, #12]

  // enable output compare channels TIM_CH1,2,3,4
	// then enable the TIM1 peripheral
  HAL_TIM_OC_Start(htim, TIM_CHANNEL_1);
 8005be0:	2100      	movs	r1, #0
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7fe feac 	bl	8004940 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(htim, TIM_CHANNEL_2);
 8005be8:	2104      	movs	r1, #4
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7fe fea8 	bl	8004940 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(htim, TIM_CHANNEL_3);
 8005bf0:	2108      	movs	r1, #8
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f7fe fea4 	bl	8004940 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(htim, TIM_CHANNEL_4);
 8005bf8:	210c      	movs	r1, #12
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7fe fea0 	bl	8004940 <HAL_TIM_OC_Start>

	// register DMA xfer complete and error callbacks for DMA stream hooked up to TIM1_CH1,2,3
	HAL_DMA_RegisterCallback(hdma_tim, HAL_DMA_XFER_CPLT_CB_ID, DAC_xfer_M0_cplt);
 8005c00:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <DAC_Init+0xf4>)
 8005c02:	2100      	movs	r1, #0
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fc fc5b 	bl	80024c0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(hdma_tim, HAL_DMA_XFER_M1CPLT_CB_ID, DAC_xfer_M1_cplt);
 8005c0a:	4a11      	ldr	r2, [pc, #68]	; (8005c50 <DAC_Init+0xf8>)
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fc fc56 	bl	80024c0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(hdma_tim, HAL_DMA_XFER_ERROR_CB_ID, TIM_DMAError);
 8005c14:	4a0f      	ldr	r2, [pc, #60]	; (8005c54 <DAC_Init+0xfc>)
 8005c16:	2104      	movs	r1, #4
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7fc fc51 	bl	80024c0 <HAL_DMA_RegisterCallback>


	// enable DBM and configure the DMA stream hooked up to TIM1_CH1,2,3
	// then enable the DMA peripheral
	HAL_DMAEx_MultiBufferStart_IT(hdma_tim, (uint32_t) M0_buff, (uint32_t) &hspi->Instance->DR, (uint32_t) M1_buff, DAC_MEM_BUFF_SIZE);
 8005c1e:	4908      	ldr	r1, [pc, #32]	; (8005c40 <DAC_Init+0xe8>)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	4618      	mov	r0, r3
 8005c28:	4a06      	ldr	r2, [pc, #24]	; (8005c44 <DAC_Init+0xec>)
 8005c2a:	2390      	movs	r3, #144	; 0x90
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	4602      	mov	r2, r0
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fc fd78 	bl	8002728 <HAL_DMAEx_MultiBufferStart_IT>
}
 8005c38:	bf00      	nop
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000368 	.word	0x20000368
 8005c44:	200002d8 	.word	0x200002d8
 8005c48:	200002d4 	.word	0x200002d4
 8005c4c:	08005ced 	.word	0x08005ced
 8005c50:	08005d19 	.word	0x08005d19
 8005c54:	08004f1d 	.word	0x08004f1d

08005c58 <DAC_queue_push>:

// converts float to a 14-bit DAC sample
void DAC_queue_push(float sample) {
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	ed87 0a01 	vstr	s0, [r7, #4]
	// check if queue has room for another sample
	if (dac_queue_size_bytes + BYTES_PER_DAC_SAMPLE > DAC_MEM_BUFF_SIZE) {
 8005c62:	4b1f      	ldr	r3, [pc, #124]	; (8005ce0 <DAC_queue_push+0x88>)
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	2b8d      	cmp	r3, #141	; 0x8d
 8005c68:	d834      	bhi.n	8005cd4 <DAC_queue_push+0x7c>
		return;
	}

	// convert from float to 16-bit int with DAC sample in upper-most 14 bits
	uint16_t sample_int = ((uint16_t) ((sample * 8191) + 8191)) << 2;
 8005c6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005ce4 <DAC_queue_push+0x8c>
 8005c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c76:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005ce4 <DAC_queue_push+0x8c>
 8005c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c82:	ee17 3a90 	vmov	r3, s15
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	81fb      	strh	r3, [r7, #14]

	// TODO: calculate 8 control bits
	uint8_t ctrl = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	737b      	strb	r3, [r7, #13]

	// add to queue
	sample_queue[dac_queue_size_bytes] = ctrl;
 8005c90:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <DAC_queue_push+0x90>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a12      	ldr	r2, [pc, #72]	; (8005ce0 <DAC_queue_push+0x88>)
 8005c96:	8812      	ldrh	r2, [r2, #0]
 8005c98:	4413      	add	r3, r2
 8005c9a:	7b7a      	ldrb	r2, [r7, #13]
 8005c9c:	701a      	strb	r2, [r3, #0]
	sample_queue[dac_queue_size_bytes+1] = (uint8_t) (sample_int >> 8);
 8005c9e:	89fb      	ldrh	r3, [r7, #14]
 8005ca0:	0a1b      	lsrs	r3, r3, #8
 8005ca2:	b299      	uxth	r1, r3
 8005ca4:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <DAC_queue_push+0x90>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <DAC_queue_push+0x88>)
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	b2ca      	uxtb	r2, r1
 8005cb2:	701a      	strb	r2, [r3, #0]
	sample_queue[dac_queue_size_bytes+2] = (uint8_t) sample_int;
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <DAC_queue_push+0x90>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <DAC_queue_push+0x88>)
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	89fa      	ldrh	r2, [r7, #14]
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]

	dac_queue_size_bytes += BYTES_PER_DAC_SAMPLE;
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <DAC_queue_push+0x88>)
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	3303      	adds	r3, #3
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <DAC_queue_push+0x88>)
 8005cd0:	801a      	strh	r2, [r3, #0]
 8005cd2:	e000      	b.n	8005cd6 <DAC_queue_push+0x7e>
		return;
 8005cd4:	bf00      	nop
}
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	200002d0 	.word	0x200002d0
 8005ce4:	45fff800 	.word	0x45fff800
 8005ce8:	200002d4 	.word	0x200002d4

08005cec <DAC_xfer_M0_cplt>:


// swap the sample_queue memory pointer and reset queue size
void DAC_xfer_M0_cplt(DMA_HandleTypeDef *hdma) {
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	sample_queue = (uint8_t *) M0_buff;
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <DAC_xfer_M0_cplt+0x20>)
 8005cf6:	4a06      	ldr	r2, [pc, #24]	; (8005d10 <DAC_xfer_M0_cplt+0x24>)
 8005cf8:	601a      	str	r2, [r3, #0]
	dac_queue_size_bytes = 0;
 8005cfa:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <DAC_xfer_M0_cplt+0x28>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	801a      	strh	r2, [r3, #0]
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	200002d4 	.word	0x200002d4
 8005d10:	20000368 	.word	0x20000368
 8005d14:	200002d0 	.word	0x200002d0

08005d18 <DAC_xfer_M1_cplt>:

// swap the sample_queue memory pointer and reset queue size
void DAC_xfer_M1_cplt(DMA_HandleTypeDef *hdma) {
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	sample_queue = (uint8_t *) M1_buff;
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <DAC_xfer_M1_cplt+0x20>)
 8005d22:	4a06      	ldr	r2, [pc, #24]	; (8005d3c <DAC_xfer_M1_cplt+0x24>)
 8005d24:	601a      	str	r2, [r3, #0]
	dac_queue_size_bytes = 0;
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <DAC_xfer_M1_cplt+0x28>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	801a      	strh	r2, [r3, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	200002d4 	.word	0x200002d4
 8005d3c:	200002d8 	.word	0x200002d8
 8005d40:	200002d0 	.word	0x200002d0

08005d44 <__errno>:
 8005d44:	4b01      	ldr	r3, [pc, #4]	; (8005d4c <__errno+0x8>)
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	2000000c 	.word	0x2000000c

08005d50 <__libc_init_array>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	4d0d      	ldr	r5, [pc, #52]	; (8005d88 <__libc_init_array+0x38>)
 8005d54:	4c0d      	ldr	r4, [pc, #52]	; (8005d8c <__libc_init_array+0x3c>)
 8005d56:	1b64      	subs	r4, r4, r5
 8005d58:	10a4      	asrs	r4, r4, #2
 8005d5a:	2600      	movs	r6, #0
 8005d5c:	42a6      	cmp	r6, r4
 8005d5e:	d109      	bne.n	8005d74 <__libc_init_array+0x24>
 8005d60:	4d0b      	ldr	r5, [pc, #44]	; (8005d90 <__libc_init_array+0x40>)
 8005d62:	4c0c      	ldr	r4, [pc, #48]	; (8005d94 <__libc_init_array+0x44>)
 8005d64:	f000 f8ce 	bl	8005f04 <_init>
 8005d68:	1b64      	subs	r4, r4, r5
 8005d6a:	10a4      	asrs	r4, r4, #2
 8005d6c:	2600      	movs	r6, #0
 8005d6e:	42a6      	cmp	r6, r4
 8005d70:	d105      	bne.n	8005d7e <__libc_init_array+0x2e>
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d78:	4798      	blx	r3
 8005d7a:	3601      	adds	r6, #1
 8005d7c:	e7ee      	b.n	8005d5c <__libc_init_array+0xc>
 8005d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d82:	4798      	blx	r3
 8005d84:	3601      	adds	r6, #1
 8005d86:	e7f2      	b.n	8005d6e <__libc_init_array+0x1e>
 8005d88:	0800ff4c 	.word	0x0800ff4c
 8005d8c:	0800ff4c 	.word	0x0800ff4c
 8005d90:	0800ff4c 	.word	0x0800ff4c
 8005d94:	0800ff50 	.word	0x0800ff50

08005d98 <memset>:
 8005d98:	4402      	add	r2, r0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d100      	bne.n	8005da2 <memset+0xa>
 8005da0:	4770      	bx	lr
 8005da2:	f803 1b01 	strb.w	r1, [r3], #1
 8005da6:	e7f9      	b.n	8005d9c <memset+0x4>

08005da8 <fmodf>:
 8005da8:	b508      	push	{r3, lr}
 8005daa:	ed2d 8b02 	vpush	{d8}
 8005dae:	eef0 8a40 	vmov.f32	s17, s0
 8005db2:	eeb0 8a60 	vmov.f32	s16, s1
 8005db6:	f000 f823 	bl	8005e00 <__ieee754_fmodf>
 8005dba:	4b0f      	ldr	r3, [pc, #60]	; (8005df8 <fmodf+0x50>)
 8005dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	d016      	beq.n	8005df2 <fmodf+0x4a>
 8005dc4:	eeb4 8a48 	vcmp.f32	s16, s16
 8005dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dcc:	d611      	bvs.n	8005df2 <fmodf+0x4a>
 8005dce:	eef4 8a68 	vcmp.f32	s17, s17
 8005dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd6:	d60c      	bvs.n	8005df2 <fmodf+0x4a>
 8005dd8:	eddf 8a08 	vldr	s17, [pc, #32]	; 8005dfc <fmodf+0x54>
 8005ddc:	eeb4 8a68 	vcmp.f32	s16, s17
 8005de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de4:	d105      	bne.n	8005df2 <fmodf+0x4a>
 8005de6:	f7ff ffad 	bl	8005d44 <__errno>
 8005dea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005dee:	2321      	movs	r3, #33	; 0x21
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	ecbd 8b02 	vpop	{d8}
 8005df6:	bd08      	pop	{r3, pc}
 8005df8:	20000070 	.word	0x20000070
 8005dfc:	00000000 	.word	0x00000000

08005e00 <__ieee754_fmodf>:
 8005e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e02:	ee10 6a90 	vmov	r6, s1
 8005e06:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8005e0a:	d009      	beq.n	8005e20 <__ieee754_fmodf+0x20>
 8005e0c:	ee10 2a10 	vmov	r2, s0
 8005e10:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005e14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005e18:	da02      	bge.n	8005e20 <__ieee754_fmodf+0x20>
 8005e1a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005e1e:	dd04      	ble.n	8005e2a <__ieee754_fmodf+0x2a>
 8005e20:	ee60 0a20 	vmul.f32	s1, s0, s1
 8005e24:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8005e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2a:	42ab      	cmp	r3, r5
 8005e2c:	dbfc      	blt.n	8005e28 <__ieee754_fmodf+0x28>
 8005e2e:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8005e32:	d106      	bne.n	8005e42 <__ieee754_fmodf+0x42>
 8005e34:	4a32      	ldr	r2, [pc, #200]	; (8005f00 <__ieee754_fmodf+0x100>)
 8005e36:	0fe3      	lsrs	r3, r4, #31
 8005e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e3c:	ed93 0a00 	vldr	s0, [r3]
 8005e40:	e7f2      	b.n	8005e28 <__ieee754_fmodf+0x28>
 8005e42:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8005e46:	d13f      	bne.n	8005ec8 <__ieee754_fmodf+0xc8>
 8005e48:	0219      	lsls	r1, r3, #8
 8005e4a:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8005e4e:	2900      	cmp	r1, #0
 8005e50:	dc37      	bgt.n	8005ec2 <__ieee754_fmodf+0xc2>
 8005e52:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8005e56:	d13d      	bne.n	8005ed4 <__ieee754_fmodf+0xd4>
 8005e58:	022f      	lsls	r7, r5, #8
 8005e5a:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8005e5e:	2f00      	cmp	r7, #0
 8005e60:	da35      	bge.n	8005ece <__ieee754_fmodf+0xce>
 8005e62:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8005e66:	bfbb      	ittet	lt
 8005e68:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8005e6c:	1a12      	sublt	r2, r2, r0
 8005e6e:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8005e72:	4093      	lsllt	r3, r2
 8005e74:	bfa8      	it	ge
 8005e76:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8005e7a:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8005e7e:	bfb5      	itete	lt
 8005e80:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8005e84:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8005e88:	1a52      	sublt	r2, r2, r1
 8005e8a:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8005e8e:	bfb8      	it	lt
 8005e90:	4095      	lsllt	r5, r2
 8005e92:	1a40      	subs	r0, r0, r1
 8005e94:	1b5a      	subs	r2, r3, r5
 8005e96:	bb00      	cbnz	r0, 8005eda <__ieee754_fmodf+0xda>
 8005e98:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8005e9c:	bf38      	it	cc
 8005e9e:	4613      	movcc	r3, r2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0c7      	beq.n	8005e34 <__ieee754_fmodf+0x34>
 8005ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ea8:	db1f      	blt.n	8005eea <__ieee754_fmodf+0xea>
 8005eaa:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8005eae:	db1f      	blt.n	8005ef0 <__ieee754_fmodf+0xf0>
 8005eb0:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8005eb4:	317f      	adds	r1, #127	; 0x7f
 8005eb6:	4323      	orrs	r3, r4
 8005eb8:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8005ebc:	ee00 3a10 	vmov	s0, r3
 8005ec0:	e7b2      	b.n	8005e28 <__ieee754_fmodf+0x28>
 8005ec2:	3801      	subs	r0, #1
 8005ec4:	0049      	lsls	r1, r1, #1
 8005ec6:	e7c2      	b.n	8005e4e <__ieee754_fmodf+0x4e>
 8005ec8:	15d8      	asrs	r0, r3, #23
 8005eca:	387f      	subs	r0, #127	; 0x7f
 8005ecc:	e7c1      	b.n	8005e52 <__ieee754_fmodf+0x52>
 8005ece:	3901      	subs	r1, #1
 8005ed0:	007f      	lsls	r7, r7, #1
 8005ed2:	e7c4      	b.n	8005e5e <__ieee754_fmodf+0x5e>
 8005ed4:	15e9      	asrs	r1, r5, #23
 8005ed6:	397f      	subs	r1, #127	; 0x7f
 8005ed8:	e7c3      	b.n	8005e62 <__ieee754_fmodf+0x62>
 8005eda:	2a00      	cmp	r2, #0
 8005edc:	da02      	bge.n	8005ee4 <__ieee754_fmodf+0xe4>
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	3801      	subs	r0, #1
 8005ee2:	e7d7      	b.n	8005e94 <__ieee754_fmodf+0x94>
 8005ee4:	d0a6      	beq.n	8005e34 <__ieee754_fmodf+0x34>
 8005ee6:	0053      	lsls	r3, r2, #1
 8005ee8:	e7fa      	b.n	8005ee0 <__ieee754_fmodf+0xe0>
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	3901      	subs	r1, #1
 8005eee:	e7d9      	b.n	8005ea4 <__ieee754_fmodf+0xa4>
 8005ef0:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8005ef4:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8005ef8:	3182      	adds	r1, #130	; 0x82
 8005efa:	410b      	asrs	r3, r1
 8005efc:	4323      	orrs	r3, r4
 8005efe:	e7dd      	b.n	8005ebc <__ieee754_fmodf+0xbc>
 8005f00:	0800ff3c 	.word	0x0800ff3c

08005f04 <_init>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	bf00      	nop
 8005f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0a:	bc08      	pop	{r3}
 8005f0c:	469e      	mov	lr, r3
 8005f0e:	4770      	bx	lr

08005f10 <_fini>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr
