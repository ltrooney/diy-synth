
nucleo-vclfo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000238c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a020  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c540  0800c540  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c540  0800c540  0001c540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c548  0800c548  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c548  0800c548  0001c548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c54c  0800c54c  0001c54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000074  0800c5c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800c5c4  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009da1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001640  00000000  00000000  00029e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015be0  00000000  00000000  0002c860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fea  00000000  00000000  00042440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1c5  00000000  00000000  0004c42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d85ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b5c  00000000  00000000  000d8644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002508 	.word	0x08002508

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08002508 	.word	0x08002508

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fc8f 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f87d 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f935 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004de:	f000 f909 	bl	80006f4 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80004e2:	f000 f8e3 	bl	80006ac <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // start timer
  HAL_TIM_Base_Start(&htim10);
 80004e6:	4832      	ldr	r0, [pc, #200]	; (80005b0 <main+0xe4>)
 80004e8:	f001 fc3e 	bl	8001d68 <HAL_TIM_Base_Start>
  tim10_val = __HAL_TIM_GET_COUNTER(&htim10);
 80004ec:	4b30      	ldr	r3, [pc, #192]	; (80005b0 <main+0xe4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f2:	461a      	mov	r2, r3
 80004f4:	4b2f      	ldr	r3, [pc, #188]	; (80005b4 <main+0xe8>)
 80004f6:	601a      	str	r2, [r3, #0]

  k = 0;
 80004f8:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <main+0xec>)
 80004fa:	f04f 0200 	mov.w	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
  GPIO_PinState toggle_val = 1;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (__HAL_TIM_GET_COUNTER(&htim10) - tim10_val >= 1) {
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <main+0xe4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050a:	4a2a      	ldr	r2, [pc, #168]	; (80005b4 <main+0xe8>)
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	4293      	cmp	r3, r2
 8000510:	d0f8      	beq.n	8000504 <main+0x38>



//		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		  playback_rate = SMPL_SIZE * f / FS;
 8000512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000516:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000522:	fb93 f3f2 	sdiv	r3, r3, r2
 8000526:	4a25      	ldr	r2, [pc, #148]	; (80005bc <main+0xf0>)
 8000528:	6013      	str	r3, [r2, #0]
		  int wave_shape_floor = (int) wave_shape;
 800052a:	eddf 7a25 	vldr	s15, [pc, #148]	; 80005c0 <main+0xf4>
 800052e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000532:	ee17 3a90 	vmov	r3, s15
 8000536:	603b      	str	r3, [r7, #0]
		  GPIOA->BSRR = GPIO_PIN_4; // gpio on
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <main+0xf8>)
 800053a:	2210      	movs	r2, #16
 800053c:	619a      	str	r2, [r3, #24]
		  y2 = wt_sample(wave_shape_floor, f, k);
 800053e:	eddf 7a22 	vldr	s15, [pc, #136]	; 80005c8 <main+0xfc>
 8000542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <main+0xec>)
 8000548:	ed93 7a00 	vldr	s14, [r3]
 800054c:	eef0 0a47 	vmov.f32	s1, s14
 8000550:	eeb0 0a67 	vmov.f32	s0, s15
 8000554:	6838      	ldr	r0, [r7, #0]
 8000556:	f000 fa65 	bl	8000a24 <wt_sample>
 800055a:	eef0 7a40 	vmov.f32	s15, s0
 800055e:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <main+0x100>)
 8000560:	edc3 7a00 	vstr	s15, [r3]
		  GPIOA->BSRR = (uint32_t) GPIO_PIN_4 << 16U;	// gpio off
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <main+0xf8>)
 8000566:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800056a:	619a      	str	r2, [r3, #24]

		  k = fmodf(k + playback_rate, SMPL_SIZE);
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <main+0xf0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	ee07 3a90 	vmov	s15, r3
 8000574:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <main+0xec>)
 800057a:	edd3 7a00 	vldr	s15, [r3]
 800057e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000582:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80005d0 <main+0x104>
 8000586:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800058a:	eef0 0a47 	vmov.f32	s1, s14
 800058e:	eeb0 0a67 	vmov.f32	s0, s15
 8000592:	f001 ff0b 	bl	80023ac <fmodf>
 8000596:	eef0 7a40 	vmov.f32	s15, s0
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <main+0xec>)
 800059c:	edc3 7a00 	vstr	s15, [r3]

		  tim10_val = __HAL_TIM_GET_COUNTER(&htim10);
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <main+0xe4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <main+0xe8>)
 80005aa:	601a      	str	r2, [r3, #0]
	  if (__HAL_TIM_GET_COUNTER(&htim10) - tim10_val >= 1) {
 80005ac:	e7aa      	b.n	8000504 <main+0x38>
 80005ae:	bf00      	nop
 80005b0:	200000a0 	.word	0x200000a0
 80005b4:	20000090 	.word	0x20000090
 80005b8:	2000009c 	.word	0x2000009c
 80005bc:	20000094 	.word	0x20000094
 80005c0:	00000000 	.word	0x00000000
 80005c4:	40020000 	.word	0x40020000
 80005c8:	000001b8 	.word	0x000001b8
 80005cc:	20000098 	.word	0x20000098
 80005d0:	00000100 	.word	0x00000100

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 feda 	bl	800239c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a28      	ldr	r2, [pc, #160]	; (80006a4 <SystemClock_Config+0xd0>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xd4>)
 8000622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000648:	2310      	movs	r3, #16
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f000 febe 	bl	80013e0 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066a:	f000 fac5 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f920 	bl	80018d0 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000696:	f000 faaf 	bl	8000bf8 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_TIM10_Init+0x40>)
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <MX_TIM10_Init+0x44>)
 80006b4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1750 - 1;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_TIM10_Init+0x40>)
 80006b8:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80006bc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_TIM10_Init+0x40>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_TIM10_Init+0x40>)
 80006c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ca:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_TIM10_Init+0x40>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_TIM10_Init+0x40>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_TIM10_Init+0x40>)
 80006da:	f001 faf5 	bl	8001cc8 <HAL_TIM_Base_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80006e4:	f000 fa88 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000a0 	.word	0x200000a0
 80006f0:	40014400 	.word	0x40014400

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART2_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800072c:	f001 fbf6 	bl	8001f1c <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 fa5f 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000e8 	.word	0x200000e8
 8000744:	40004400 	.word	0x40004400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a2c      	ldr	r2, [pc, #176]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a25      	ldr	r2, [pc, #148]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2130      	movs	r1, #48	; 0x30
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_GPIO_Init+0xd4>)
 80007d4:	f000 fdea 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_GPIO_Init+0xd8>)
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_GPIO_Init+0xdc>)
 80007ee:	f000 fc59 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80007f2:	2330      	movs	r3, #48	; 0x30
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_GPIO_Init+0xd4>)
 800080a:	f000 fc4b 	bl	80010a4 <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	10210000 	.word	0x10210000
 8000824:	40020800 	.word	0x40020800

08000828 <min>:

/* USER CODE BEGIN 4 */

static inline int min(int a, int b) { return ((a<b)?a:b); }
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4293      	cmp	r3, r2
 8000838:	bfa8      	it	ge
 800083a:	4613      	movge	r3, r2
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <interp>:

static inline int max(int a, int b) { return ((a<b)?b:a); }

static inline float interp(float x1, float x2, float amount) {
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000852:	edc7 0a02 	vstr	s1, [r7, #8]
 8000856:	ed87 1a01 	vstr	s2, [r7, #4]
	return (1-amount) * x1 + amount * x2;
 800085a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800085e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000866:	edd7 7a03 	vldr	s15, [r7, #12]
 800086a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800086e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000872:	edd7 7a02 	vldr	s15, [r7, #8]
 8000876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800087a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800087e:	eeb0 0a67 	vmov.f32	s0, s15
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <clamp>:

static inline float clamp(float x, float lower, float upper) {
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	ed87 0a03 	vstr	s0, [r7, #12]
 8000896:	edc7 0a02 	vstr	s1, [r7, #8]
 800089a:	ed87 1a01 	vstr	s2, [r7, #4]
	return x <= lower ? lower : x >= upper ? upper : x;
 800089e:	ed97 7a03 	vldr	s14, [r7, #12]
 80008a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80008a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ae:	d801      	bhi.n	80008b4 <clamp+0x28>
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	e00b      	b.n	80008cc <clamp+0x40>
 80008b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80008b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80008bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	db01      	blt.n	80008ca <clamp+0x3e>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	e000      	b.n	80008cc <clamp+0x40>
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	ee07 3a90 	vmov	s15, r3
}
 80008d0:	eeb0 0a67 	vmov.f32	s0, s15
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <translate_range>:

static float translate_range(float x, float from_min, float from_max, float to_min, float to_max) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	ed87 0a05 	vstr	s0, [r7, #20]
 80008ea:	edc7 0a04 	vstr	s1, [r7, #16]
 80008ee:	ed87 1a03 	vstr	s2, [r7, #12]
 80008f2:	edc7 1a02 	vstr	s3, [r7, #8]
 80008f6:	ed87 2a01 	vstr	s4, [r7, #4]
	float from_rng = from_max - from_min;
 80008fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80008fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000906:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float to_rng = to_max - to_min;
 800090a:	ed97 7a01 	vldr	s14, [r7, #4]
 800090e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000916:	edc7 7a08 	vstr	s15, [r7, #32]

	if (from_rng == 0) {
 800091a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800091e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000926:	d102      	bne.n	800092e <translate_range+0x4e>
		return 0;
 8000928:	eddf 7a12 	vldr	s15, [pc, #72]	; 8000974 <translate_range+0x94>
 800092c:	e01d      	b.n	800096a <translate_range+0x8a>
	}

	float out = (((x - from_min) * to_rng) / from_rng) + to_min;
 800092e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000932:	edd7 7a04 	vldr	s15, [r7, #16]
 8000936:	ee37 7a67 	vsub.f32	s14, s14, s15
 800093a:	edd7 7a08 	vldr	s15, [r7, #32]
 800093e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000942:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800094a:	ed97 7a02 	vldr	s14, [r7, #8]
 800094e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000952:	edc7 7a07 	vstr	s15, [r7, #28]
	return clamp(out, to_min, to_max);
 8000956:	ed97 1a01 	vldr	s2, [r7, #4]
 800095a:	edd7 0a02 	vldr	s1, [r7, #8]
 800095e:	ed97 0a07 	vldr	s0, [r7, #28]
 8000962:	f7ff ff93 	bl	800088c <clamp>
 8000966:	eef0 7a40 	vmov.f32	s15, s0
}
 800096a:	eeb0 0a67 	vmov.f32	s0, s15
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	00000000 	.word	0x00000000

08000978 <lookup>:

static inline float lookup(const int wave_idx, const int octave_idx, const int sample_idx) {
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	return wavetable[SMPL_SIZE * ((NUM_OCTAVES * wave_idx) + octave_idx) + sample_idx];
 8000984:	220a      	movs	r2, #10
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	fb03 f202 	mul.w	r2, r3, r2
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4413      	add	r3, r2
 8000990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000994:	fb02 f203 	mul.w	r2, r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <lookup+0x40>)
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	ee07 3a90 	vmov	s15, r3
}
 80009a8:	eeb0 0a67 	vmov.f32	s0, s15
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	08002520 	.word	0x08002520

080009bc <lerp2pt>:

static inline float lerp2pt(float x0, float y0, float x1, float y1, float k) {
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80009c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80009ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80009ce:	edc7 1a02 	vstr	s3, [r7, #8]
 80009d2:	ed87 2a01 	vstr	s4, [r7, #4]
	return (y0 * (x1 - k) + y1 * (k - x0)) / (x1 - x0);
 80009d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80009da:	edd7 7a01 	vldr	s15, [r7, #4]
 80009de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80009e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ea:	edd7 6a01 	vldr	s13, [r7, #4]
 80009ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80009f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80009f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80009fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a02:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000a12:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a16:	eeb0 0a67 	vmov.f32	s0, s15
 8000a1a:	371c      	adds	r7, #28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <wt_sample>:


static float wt_sample(const int wave_idx, const float f, const float k) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a30:	edc7 0a01 	vstr	s1, [r7, #4]

	const float f_clamp = clamp(f, VCO_F_MIN, VCO_F_MAX);
 8000a34:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8000bec <wt_sample+0x1c8>
 8000a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000bf0 <wt_sample+0x1cc>
 8000a40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a44:	eeb0 1a47 	vmov.f32	s2, s14
 8000a48:	eef0 0a67 	vmov.f32	s1, s15
 8000a4c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a50:	f7ff ff1c 	bl	800088c <clamp>
 8000a54:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44

	// quick compute log2(f_clamp / VCO_F_MIN)
	int intlog = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	int x = (int) f_clamp / VCO_F_MIN;
 8000a5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a64:	ee17 2a90 	vmov	r2, s15
 8000a68:	2328      	movs	r3, #40	; 0x28
 8000a6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
	while (x >>= 1) ++intlog;
 8000a70:	e002      	b.n	8000a78 <wt_sample+0x54>
 8000a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a74:	3301      	adds	r3, #1
 8000a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a7a:	105b      	asrs	r3, r3, #1
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f6      	bne.n	8000a72 <wt_sample+0x4e>

	const int oct1_idx = intlog + 1;
 8000a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a86:	3301      	adds	r3, #1
 8000a88:	643b      	str	r3, [r7, #64]	; 0x40
	const int oct2_idx = min(oct1_idx + 1, NUM_OCTAVES - 1);
 8000a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	220a      	movs	r2, #10
 8000a90:	3a01      	subs	r2, #1
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fec7 	bl	8000828 <min>
 8000a9a:	63f8      	str	r0, [r7, #60]	; 0x3c

	const int x0 = (int) k;
 8000a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa4:	ee17 3a90 	vmov	r3, s15
 8000aa8:	63bb      	str	r3, [r7, #56]	; 0x38
	const int x1 = x0 + 1;
 8000aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aac:	3301      	adds	r3, #1
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34

	const int p_lo = VCO_F_MIN << (oct1_idx - 1);
 8000ab0:	2228      	movs	r2, #40	; 0x28
 8000ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30

	const int interpol_amt = translate_range(f_clamp, p_lo, p_lo << 1, 0, 1);
 8000abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000abe:	ee07 3a90 	vmov	s15, r3
 8000ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	ee07 3a10 	vmov	s14, r3
 8000ace:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ad2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8000ad6:	eddf 1a47 	vldr	s3, [pc, #284]	; 8000bf4 <wt_sample+0x1d0>
 8000ada:	eeb0 1a47 	vmov.f32	s2, s14
 8000ade:	eef0 0a67 	vmov.f32	s1, s15
 8000ae2:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8000ae6:	f7ff fefb 	bl	80008e0 <translate_range>
 8000aea:	eef0 7a40 	vmov.f32	s15, s0
 8000aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af2:	ee17 3a90 	vmov	r3, s15
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c

	// interpolate between octaves at point x0
	const float px0_1 = lookup(wave_idx, oct1_idx, x0 % SMPL_SIZE);
 8000af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000afe:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b02:	fb02 f201 	mul.w	r2, r2, r1
 8000b06:	1a9b      	subs	r3, r3, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f7ff ff33 	bl	8000978 <lookup>
 8000b12:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	const float px0_2 = lookup(wave_idx, oct2_idx, x0 % SMPL_SIZE);
 8000b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b20:	fb02 f201 	mul.w	r2, r2, r1
 8000b24:	1a9b      	subs	r3, r3, r2
 8000b26:	461a      	mov	r2, r3
 8000b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f7ff ff24 	bl	8000978 <lookup>
 8000b30:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	const float y0 = interp(px0_1, px0_2, interpol_amt);
 8000b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b36:	ee07 3a90 	vmov	s15, r3
 8000b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3e:	eeb0 1a67 	vmov.f32	s2, s15
 8000b42:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8000b46:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000b4a:	f7ff fe7d 	bl	8000848 <interp>
 8000b4e:	ed87 0a08 	vstr	s0, [r7, #32]

	// interpolate between octaves at point x1
	const float px1_1 = lookup(wave_idx, oct1_idx, x1 % SMPL_SIZE);
 8000b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b58:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b5c:	fb02 f201 	mul.w	r2, r2, r1
 8000b60:	1a9b      	subs	r3, r3, r2
 8000b62:	461a      	mov	r2, r3
 8000b64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f7ff ff06 	bl	8000978 <lookup>
 8000b6c:	ed87 0a07 	vstr	s0, [r7, #28]
	const float px1_2 = lookup(wave_idx, oct2_idx, x1 % SMPL_SIZE);
 8000b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b76:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b7a:	fb02 f201 	mul.w	r2, r2, r1
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f7ff fef7 	bl	8000978 <lookup>
 8000b8a:	ed87 0a06 	vstr	s0, [r7, #24]
	const float y1 = interp(px1_1, px1_2, interpol_amt);
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	ee07 3a90 	vmov	s15, r3
 8000b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b98:	eeb0 1a67 	vmov.f32	s2, s15
 8000b9c:	edd7 0a06 	vldr	s1, [r7, #24]
 8000ba0:	ed97 0a07 	vldr	s0, [r7, #28]
 8000ba4:	f7ff fe50 	bl	8000848 <interp>
 8000ba8:	ed87 0a05 	vstr	s0, [r7, #20]

	const float y = lerp2pt(x0, y0, x1, y1, k);
 8000bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb8:	ee07 3a10 	vmov	s14, r3
 8000bbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000bc0:	ed97 2a01 	vldr	s4, [r7, #4]
 8000bc4:	edd7 1a05 	vldr	s3, [r7, #20]
 8000bc8:	eeb0 1a47 	vmov.f32	s2, s14
 8000bcc:	edd7 0a08 	vldr	s1, [r7, #32]
 8000bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd4:	f7ff fef2 	bl	80009bc <lerp2pt>
 8000bd8:	ed87 0a04 	vstr	s0, [r7, #16]

	return y;
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	ee07 3a90 	vmov	s15, r3
}
 8000be2:	eeb0 0a67 	vmov.f32	s0, s15
 8000be6:	3750      	adds	r7, #80	; 0x50
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	00000028 	.word	0x00000028
 8000bf0:	00004e20 	.word	0x00004e20
 8000bf4:	00000000 	.word	0x00000000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c42:	2007      	movs	r0, #7
 8000c44:	f000 f9fa 	bl	800103c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_TIM_Base_MspInit+0x3c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d10d      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_TIM_Base_MspInit+0x40>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <HAL_TIM_Base_MspInit+0x40>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <HAL_TIM_Base_MspInit+0x40>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40014400 	.word	0x40014400
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d0e:	f000 f9c9 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f890 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da6:	490e      	ldr	r1, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dbc:	4c0b      	ldr	r4, [pc, #44]	; (8000dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ffd7 	bl	8000d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f001 fac1 	bl	8002354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fb7b 	bl	80004cc <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000de4:	0800c550 	.word	0x0800c550
  ldr r2, =_sbss
 8000de8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dec:	20000130 	.word	0x20000130

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f90d 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff feec 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f917 	bl	800108a <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e74:	f000 f8ed 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	2000012c 	.word	0x2000012c

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000012c 	.word	0x2000012c

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff47 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff5c 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffb0 	bl	8000ff8 <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e159      	b.n	8001374 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8148 	bne.w	800136e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d130      	bne.n	8001158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d017      	beq.n	8001194 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a2 	beq.w	800136e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b57      	ldr	r3, [pc, #348]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b54      	ldr	r3, [pc, #336]	; (800138c <HAL_GPIO_Init+0x2e8>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <HAL_GPIO_Init+0x2f0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x202>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a48      	ldr	r2, [pc, #288]	; (8001398 <HAL_GPIO_Init+0x2f4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x1fe>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a47      	ldr	r2, [pc, #284]	; (800139c <HAL_GPIO_Init+0x2f8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x1fa>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a46      	ldr	r2, [pc, #280]	; (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x1f6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_GPIO_Init+0x300>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x1f2>
 8001292:	2304      	movs	r3, #4
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 8001296:	2307      	movs	r3, #7
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001314:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f aea2 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e264      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d075      	beq.n	80014ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013fe:	4ba3      	ldr	r3, [pc, #652]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d00c      	beq.n	8001424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800140a:	4ba0      	ldr	r3, [pc, #640]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001412:	2b08      	cmp	r3, #8
 8001414:	d112      	bne.n	800143c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001416:	4b9d      	ldr	r3, [pc, #628]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001422:	d10b      	bne.n	800143c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	4b99      	ldr	r3, [pc, #612]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d05b      	beq.n	80014e8 <HAL_RCC_OscConfig+0x108>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d157      	bne.n	80014e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e23f      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x74>
 8001446:	4b91      	ldr	r3, [pc, #580]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a90      	ldr	r2, [pc, #576]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e01d      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x98>
 800145e:	4b8b      	ldr	r3, [pc, #556]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a8a      	ldr	r2, [pc, #552]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b88      	ldr	r3, [pc, #544]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a87      	ldr	r2, [pc, #540]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e00b      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001478:	4b84      	ldr	r3, [pc, #528]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a83      	ldr	r2, [pc, #524]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b81      	ldr	r3, [pc, #516]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a80      	ldr	r2, [pc, #512]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fd12 	bl	8000ec0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fd0e 	bl	8000ec0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e204      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b76      	ldr	r3, [pc, #472]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0xc0>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fcfe 	bl	8000ec0 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fcfa 	bl	8000ec0 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1f0      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	4b6c      	ldr	r3, [pc, #432]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0xe8>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d063      	beq.n	80015be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f6:	4b65      	ldr	r3, [pc, #404]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001502:	4b62      	ldr	r3, [pc, #392]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150a:	2b08      	cmp	r3, #8
 800150c:	d11c      	bne.n	8001548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_RCC_OscConfig+0x152>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d001      	beq.n	8001532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e1c4      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4952      	ldr	r1, [pc, #328]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	e03a      	b.n	80015be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d020      	beq.n	8001592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001550:	4b4f      	ldr	r3, [pc, #316]	; (8001690 <HAL_RCC_OscConfig+0x2b0>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fcb3 	bl	8000ec0 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fcaf 	bl	8000ec0 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1a5      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4940      	ldr	r1, [pc, #256]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	e015      	b.n	80015be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <HAL_RCC_OscConfig+0x2b0>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fc92 	bl	8000ec0 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff fc8e 	bl	8000ec0 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e184      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d030      	beq.n	800162c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d016      	beq.n	8001600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d2:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_RCC_OscConfig+0x2b4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fc72 	bl	8000ec0 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc6e 	bl	8000ec0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e164      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x200>
 80015fe:	e015      	b.n	800162c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_RCC_OscConfig+0x2b4>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff fc5b 	bl	8000ec0 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff fc57 	bl	8000ec0 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e14d      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80a0 	beq.w	800177a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10f      	bne.n	800166a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_RCC_OscConfig+0x2b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d121      	bne.n	80016ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_RCC_OscConfig+0x2b8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_RCC_OscConfig+0x2b8>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff fc1d 	bl	8000ec0 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	e011      	b.n	80016ae <HAL_RCC_OscConfig+0x2ce>
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	42470000 	.word	0x42470000
 8001694:	42470e80 	.word	0x42470e80
 8001698:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7ff fc10 	bl	8000ec0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e106      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b85      	ldr	r3, [pc, #532]	; (80018c4 <HAL_RCC_OscConfig+0x4e4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
 80016c2:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a80      	ldr	r2, [pc, #512]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
 80016ce:	e01c      	b.n	800170a <HAL_RCC_OscConfig+0x32a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d10c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x312>
 80016d8:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	4a7a      	ldr	r2, [pc, #488]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6713      	str	r3, [r2, #112]	; 0x70
 80016e4:	4b78      	ldr	r3, [pc, #480]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e8:	4a77      	ldr	r2, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6713      	str	r3, [r2, #112]	; 0x70
 80016f0:	e00b      	b.n	800170a <HAL_RCC_OscConfig+0x32a>
 80016f2:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	4a74      	ldr	r2, [pc, #464]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	; 0x70
 80016fe:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	4a71      	ldr	r2, [pc, #452]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d015      	beq.n	800173e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7ff fbd5 	bl	8000ec0 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fbd1 	bl	8000ec0 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0c5      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ee      	beq.n	800171a <HAL_RCC_OscConfig+0x33a>
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fbbf 	bl	8000ec0 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fbbb 	bl	8000ec0 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	; 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0af      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1ee      	bne.n	8001746 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d105      	bne.n	800177a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176e:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a55      	ldr	r2, [pc, #340]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 809b 	beq.w	80018ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d05c      	beq.n	800184a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d141      	bne.n	800181c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <HAL_RCC_OscConfig+0x4ec>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fb8f 	bl	8000ec0 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff fb8b 	bl	8000ec0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e081      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69da      	ldr	r2, [r3, #28]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	019b      	lsls	r3, r3, #6
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	3b01      	subs	r3, #1
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	061b      	lsls	r3, r3, #24
 80017e8:	4937      	ldr	r1, [pc, #220]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_OscConfig+0x4ec>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb64 	bl	8000ec0 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fb60 	bl	8000ec0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e056      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x41c>
 800181a:	e04e      	b.n	80018ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_OscConfig+0x4ec>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fb4d 	bl	8000ec0 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff fb49 	bl	8000ec0 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e03f      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x44a>
 8001848:	e037      	b.n	80018ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e032      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d028      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d121      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d11a      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001886:	4013      	ands	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800188c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188e:	4293      	cmp	r3, r2
 8001890:	d111      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40007000 	.word	0x40007000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	42470060 	.word	0x42470060

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0cc      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d90c      	bls.n	800190c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b65      	ldr	r3, [pc, #404]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0b8      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001924:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800192e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	494d      	ldr	r1, [pc, #308]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d044      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d119      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d003      	beq.n	800198e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198a:	2b03      	cmp	r3, #3
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e06f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e067      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 0203 	bic.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4934      	ldr	r1, [pc, #208]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7ff fa7e 	bl	8000ec0 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	e00a      	b.n	80019de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7ff fa7a 	bl	8000ec0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e04f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 020c 	and.w	r2, r3, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1eb      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d20c      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e032      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4916      	ldr	r1, [pc, #88]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	490e      	ldr	r1, [pc, #56]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a56:	f000 f821 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f9de 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	0800c520 	.word	0x0800c520
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	2300      	movs	r3, #0
 8001aae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab4:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d00d      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x40>
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	f200 80bd 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ace:	e0b7      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ad2:	60bb      	str	r3, [r7, #8]
       break;
 8001ad4:	e0b7      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad6:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001ad8:	60bb      	str	r3, [r7, #8]
      break;
 8001ada:	e0b4      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001adc:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d04d      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	461a      	mov	r2, r3
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	ea02 0800 	and.w	r8, r2, r0
 8001b0a:	ea03 0901 	and.w	r9, r3, r1
 8001b0e:	4640      	mov	r0, r8
 8001b10:	4649      	mov	r1, r9
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	014b      	lsls	r3, r1, #5
 8001b1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b20:	0142      	lsls	r2, r0, #5
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	ebb0 0008 	subs.w	r0, r0, r8
 8001b2a:	eb61 0109 	sbc.w	r1, r1, r9
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	018b      	lsls	r3, r1, #6
 8001b38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b3c:	0182      	lsls	r2, r0, #6
 8001b3e:	1a12      	subs	r2, r2, r0
 8001b40:	eb63 0301 	sbc.w	r3, r3, r1
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	00d9      	lsls	r1, r3, #3
 8001b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b52:	00d0      	lsls	r0, r2, #3
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	eb12 0208 	adds.w	r2, r2, r8
 8001b5c:	eb43 0309 	adc.w	r3, r3, r9
 8001b60:	f04f 0000 	mov.w	r0, #0
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	0259      	lsls	r1, r3, #9
 8001b6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b6e:	0250      	lsls	r0, r2, #9
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	f7fe fb28 	bl	80001d4 <__aeabi_uldivmod>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e04a      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	461a      	mov	r2, r3
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	ea02 0400 	and.w	r4, r2, r0
 8001ba6:	ea03 0501 	and.w	r5, r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	014b      	lsls	r3, r1, #5
 8001bb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bbc:	0142      	lsls	r2, r0, #5
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	1b00      	subs	r0, r0, r4
 8001bc4:	eb61 0105 	sbc.w	r1, r1, r5
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	018b      	lsls	r3, r1, #6
 8001bd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bd6:	0182      	lsls	r2, r0, #6
 8001bd8:	1a12      	subs	r2, r2, r0
 8001bda:	eb63 0301 	sbc.w	r3, r3, r1
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	00d9      	lsls	r1, r3, #3
 8001be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bec:	00d0      	lsls	r0, r2, #3
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	1912      	adds	r2, r2, r4
 8001bf4:	eb45 0303 	adc.w	r3, r5, r3
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	0299      	lsls	r1, r3, #10
 8001c02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c06:	0290      	lsls	r0, r2, #10
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	f7fe fadc 	bl	80001d4 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	60bb      	str	r3, [r7, #8]
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c42:	60bb      	str	r3, [r7, #8]
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	68bb      	ldr	r3, [r7, #8]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0a9b      	lsrs	r3, r3, #10
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	0800c530 	.word	0x0800c530

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca4:	f7ff ffdc 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0b5b      	lsrs	r3, r3, #13
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	0800c530 	.word	0x0800c530

08001cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e041      	b.n	8001d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe ffb0 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f000 f888 	bl	8001e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d001      	beq.n	8001d80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e03c      	b.n	8001dfa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_TIM_Base_Start+0xa0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d018      	beq.n	8001dc4 <HAL_TIM_Base_Start+0x5c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9a:	d013      	beq.n	8001dc4 <HAL_TIM_Base_Start+0x5c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_TIM_Base_Start+0xa4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00e      	beq.n	8001dc4 <HAL_TIM_Base_Start+0x5c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_TIM_Base_Start+0xa8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d009      	beq.n	8001dc4 <HAL_TIM_Base_Start+0x5c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_TIM_Base_Start+0xac>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d004      	beq.n	8001dc4 <HAL_TIM_Base_Start+0x5c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <HAL_TIM_Base_Start+0xb0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d111      	bne.n	8001de8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d010      	beq.n	8001df8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de6:	e007      	b.n	8001df8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	40000800 	.word	0x40000800
 8001e14:	40000c00 	.word	0x40000c00
 8001e18:	40014000 	.word	0x40014000

08001e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <TIM_Base_SetConfig+0xe4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00f      	beq.n	8001e54 <TIM_Base_SetConfig+0x38>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3a:	d00b      	beq.n	8001e54 <TIM_Base_SetConfig+0x38>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a31      	ldr	r2, [pc, #196]	; (8001f04 <TIM_Base_SetConfig+0xe8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <TIM_Base_SetConfig+0x38>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <TIM_Base_SetConfig+0xec>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d003      	beq.n	8001e54 <TIM_Base_SetConfig+0x38>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <TIM_Base_SetConfig+0xf0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d108      	bne.n	8001e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <TIM_Base_SetConfig+0xe4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01b      	beq.n	8001ea6 <TIM_Base_SetConfig+0x8a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e74:	d017      	beq.n	8001ea6 <TIM_Base_SetConfig+0x8a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <TIM_Base_SetConfig+0xe8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <TIM_Base_SetConfig+0x8a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <TIM_Base_SetConfig+0xec>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00f      	beq.n	8001ea6 <TIM_Base_SetConfig+0x8a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <TIM_Base_SetConfig+0xf0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00b      	beq.n	8001ea6 <TIM_Base_SetConfig+0x8a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <TIM_Base_SetConfig+0xf4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <TIM_Base_SetConfig+0x8a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <TIM_Base_SetConfig+0xf8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <TIM_Base_SetConfig+0x8a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <TIM_Base_SetConfig+0xfc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d108      	bne.n	8001eb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <TIM_Base_SetConfig+0xe4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d103      	bne.n	8001eec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	615a      	str	r2, [r3, #20]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40010000 	.word	0x40010000
 8001f04:	40000400 	.word	0x40000400
 8001f08:	40000800 	.word	0x40000800
 8001f0c:	40000c00 	.word	0x40000c00
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40014400 	.word	0x40014400
 8001f18:	40014800 	.word	0x40014800

08001f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e03f      	b.n	8001fae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fea8 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2224      	movs	r2, #36	; 0x24
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f829 	bl	8001fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fbc:	b09f      	sub	sp, #124	; 0x7c
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fce:	68d9      	ldr	r1, [r3, #12]
 8001fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	ea40 0301 	orr.w	r3, r0, r1
 8001fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ffc:	f021 010c 	bic.w	r1, r1, #12
 8002000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002006:	430b      	orrs	r3, r1
 8002008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800200a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002016:	6999      	ldr	r1, [r3, #24]
 8002018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	ea40 0301 	orr.w	r3, r0, r1
 8002020:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4bc5      	ldr	r3, [pc, #788]	; (800233c <UART_SetConfig+0x384>)
 8002028:	429a      	cmp	r2, r3
 800202a:	d004      	beq.n	8002036 <UART_SetConfig+0x7e>
 800202c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4bc3      	ldr	r3, [pc, #780]	; (8002340 <UART_SetConfig+0x388>)
 8002032:	429a      	cmp	r2, r3
 8002034:	d103      	bne.n	800203e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002036:	f7ff fe33 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 800203a:	6778      	str	r0, [r7, #116]	; 0x74
 800203c:	e002      	b.n	8002044 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800203e:	f7ff fe1b 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8002042:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800204c:	f040 80b6 	bne.w	80021bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002052:	461c      	mov	r4, r3
 8002054:	f04f 0500 	mov.w	r5, #0
 8002058:	4622      	mov	r2, r4
 800205a:	462b      	mov	r3, r5
 800205c:	1891      	adds	r1, r2, r2
 800205e:	6439      	str	r1, [r7, #64]	; 0x40
 8002060:	415b      	adcs	r3, r3
 8002062:	647b      	str	r3, [r7, #68]	; 0x44
 8002064:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002068:	1912      	adds	r2, r2, r4
 800206a:	eb45 0303 	adc.w	r3, r5, r3
 800206e:	f04f 0000 	mov.w	r0, #0
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	00d9      	lsls	r1, r3, #3
 8002078:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800207c:	00d0      	lsls	r0, r2, #3
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	1911      	adds	r1, r2, r4
 8002084:	6639      	str	r1, [r7, #96]	; 0x60
 8002086:	416b      	adcs	r3, r5
 8002088:	667b      	str	r3, [r7, #100]	; 0x64
 800208a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	461a      	mov	r2, r3
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	1891      	adds	r1, r2, r2
 8002096:	63b9      	str	r1, [r7, #56]	; 0x38
 8002098:	415b      	adcs	r3, r3
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80020a4:	f7fe f896 	bl	80001d4 <__aeabi_uldivmod>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4ba5      	ldr	r3, [pc, #660]	; (8002344 <UART_SetConfig+0x38c>)
 80020ae:	fba3 2302 	umull	r2, r3, r3, r2
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	011e      	lsls	r6, r3, #4
 80020b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b8:	461c      	mov	r4, r3
 80020ba:	f04f 0500 	mov.w	r5, #0
 80020be:	4622      	mov	r2, r4
 80020c0:	462b      	mov	r3, r5
 80020c2:	1891      	adds	r1, r2, r2
 80020c4:	6339      	str	r1, [r7, #48]	; 0x30
 80020c6:	415b      	adcs	r3, r3
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
 80020ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020ce:	1912      	adds	r2, r2, r4
 80020d0:	eb45 0303 	adc.w	r3, r5, r3
 80020d4:	f04f 0000 	mov.w	r0, #0
 80020d8:	f04f 0100 	mov.w	r1, #0
 80020dc:	00d9      	lsls	r1, r3, #3
 80020de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020e2:	00d0      	lsls	r0, r2, #3
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	1911      	adds	r1, r2, r4
 80020ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80020ec:	416b      	adcs	r3, r5
 80020ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	461a      	mov	r2, r3
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	1891      	adds	r1, r2, r2
 80020fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80020fe:	415b      	adcs	r3, r3
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002106:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800210a:	f7fe f863 	bl	80001d4 <__aeabi_uldivmod>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4b8c      	ldr	r3, [pc, #560]	; (8002344 <UART_SetConfig+0x38c>)
 8002114:	fba3 1302 	umull	r1, r3, r3, r2
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	2164      	movs	r1, #100	; 0x64
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	3332      	adds	r3, #50	; 0x32
 8002126:	4a87      	ldr	r2, [pc, #540]	; (8002344 <UART_SetConfig+0x38c>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	095b      	lsrs	r3, r3, #5
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002134:	441e      	add	r6, r3
 8002136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002138:	4618      	mov	r0, r3
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	1894      	adds	r4, r2, r2
 8002144:	623c      	str	r4, [r7, #32]
 8002146:	415b      	adcs	r3, r3
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800214e:	1812      	adds	r2, r2, r0
 8002150:	eb41 0303 	adc.w	r3, r1, r3
 8002154:	f04f 0400 	mov.w	r4, #0
 8002158:	f04f 0500 	mov.w	r5, #0
 800215c:	00dd      	lsls	r5, r3, #3
 800215e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002162:	00d4      	lsls	r4, r2, #3
 8002164:	4622      	mov	r2, r4
 8002166:	462b      	mov	r3, r5
 8002168:	1814      	adds	r4, r2, r0
 800216a:	653c      	str	r4, [r7, #80]	; 0x50
 800216c:	414b      	adcs	r3, r1
 800216e:	657b      	str	r3, [r7, #84]	; 0x54
 8002170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	461a      	mov	r2, r3
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	1891      	adds	r1, r2, r2
 800217c:	61b9      	str	r1, [r7, #24]
 800217e:	415b      	adcs	r3, r3
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002186:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800218a:	f7fe f823 	bl	80001d4 <__aeabi_uldivmod>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4b6c      	ldr	r3, [pc, #432]	; (8002344 <UART_SetConfig+0x38c>)
 8002194:	fba3 1302 	umull	r1, r3, r3, r2
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	2164      	movs	r1, #100	; 0x64
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	3332      	adds	r3, #50	; 0x32
 80021a6:	4a67      	ldr	r2, [pc, #412]	; (8002344 <UART_SetConfig+0x38c>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	f003 0207 	and.w	r2, r3, #7
 80021b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4432      	add	r2, r6
 80021b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021ba:	e0b9      	b.n	8002330 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021be:	461c      	mov	r4, r3
 80021c0:	f04f 0500 	mov.w	r5, #0
 80021c4:	4622      	mov	r2, r4
 80021c6:	462b      	mov	r3, r5
 80021c8:	1891      	adds	r1, r2, r2
 80021ca:	6139      	str	r1, [r7, #16]
 80021cc:	415b      	adcs	r3, r3
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021d4:	1912      	adds	r2, r2, r4
 80021d6:	eb45 0303 	adc.w	r3, r5, r3
 80021da:	f04f 0000 	mov.w	r0, #0
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	00d9      	lsls	r1, r3, #3
 80021e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021e8:	00d0      	lsls	r0, r2, #3
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	eb12 0804 	adds.w	r8, r2, r4
 80021f2:	eb43 0905 	adc.w	r9, r3, r5
 80021f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	008b      	lsls	r3, r1, #2
 800220a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800220e:	0082      	lsls	r2, r0, #2
 8002210:	4640      	mov	r0, r8
 8002212:	4649      	mov	r1, r9
 8002214:	f7fd ffde 	bl	80001d4 <__aeabi_uldivmod>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4b49      	ldr	r3, [pc, #292]	; (8002344 <UART_SetConfig+0x38c>)
 800221e:	fba3 2302 	umull	r2, r3, r3, r2
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	011e      	lsls	r6, r3, #4
 8002226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002228:	4618      	mov	r0, r3
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	1894      	adds	r4, r2, r2
 8002234:	60bc      	str	r4, [r7, #8]
 8002236:	415b      	adcs	r3, r3
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800223e:	1812      	adds	r2, r2, r0
 8002240:	eb41 0303 	adc.w	r3, r1, r3
 8002244:	f04f 0400 	mov.w	r4, #0
 8002248:	f04f 0500 	mov.w	r5, #0
 800224c:	00dd      	lsls	r5, r3, #3
 800224e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002252:	00d4      	lsls	r4, r2, #3
 8002254:	4622      	mov	r2, r4
 8002256:	462b      	mov	r3, r5
 8002258:	1814      	adds	r4, r2, r0
 800225a:	64bc      	str	r4, [r7, #72]	; 0x48
 800225c:	414b      	adcs	r3, r1
 800225e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4618      	mov	r0, r3
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	008b      	lsls	r3, r1, #2
 8002274:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002278:	0082      	lsls	r2, r0, #2
 800227a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800227e:	f7fd ffa9 	bl	80001d4 <__aeabi_uldivmod>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <UART_SetConfig+0x38c>)
 8002288:	fba3 1302 	umull	r1, r3, r3, r2
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	2164      	movs	r1, #100	; 0x64
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	3332      	adds	r3, #50	; 0x32
 800229a:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <UART_SetConfig+0x38c>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a6:	441e      	add	r6, r3
 80022a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022aa:	4618      	mov	r0, r3
 80022ac:	f04f 0100 	mov.w	r1, #0
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	1894      	adds	r4, r2, r2
 80022b6:	603c      	str	r4, [r7, #0]
 80022b8:	415b      	adcs	r3, r3
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022c0:	1812      	adds	r2, r2, r0
 80022c2:	eb41 0303 	adc.w	r3, r1, r3
 80022c6:	f04f 0400 	mov.w	r4, #0
 80022ca:	f04f 0500 	mov.w	r5, #0
 80022ce:	00dd      	lsls	r5, r3, #3
 80022d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022d4:	00d4      	lsls	r4, r2, #3
 80022d6:	4622      	mov	r2, r4
 80022d8:	462b      	mov	r3, r5
 80022da:	eb12 0a00 	adds.w	sl, r2, r0
 80022de:	eb43 0b01 	adc.w	fp, r3, r1
 80022e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	008b      	lsls	r3, r1, #2
 80022f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022fa:	0082      	lsls	r2, r0, #2
 80022fc:	4650      	mov	r0, sl
 80022fe:	4659      	mov	r1, fp
 8002300:	f7fd ff68 	bl	80001d4 <__aeabi_uldivmod>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <UART_SetConfig+0x38c>)
 800230a:	fba3 1302 	umull	r1, r3, r3, r2
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2164      	movs	r1, #100	; 0x64
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	3332      	adds	r3, #50	; 0x32
 800231c:	4a09      	ldr	r2, [pc, #36]	; (8002344 <UART_SetConfig+0x38c>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	f003 020f 	and.w	r2, r3, #15
 8002328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4432      	add	r2, r6
 800232e:	609a      	str	r2, [r3, #8]
}
 8002330:	bf00      	nop
 8002332:	377c      	adds	r7, #124	; 0x7c
 8002334:	46bd      	mov	sp, r7
 8002336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800233a:	bf00      	nop
 800233c:	40011000 	.word	0x40011000
 8002340:	40011400 	.word	0x40011400
 8002344:	51eb851f 	.word	0x51eb851f

08002348 <__errno>:
 8002348:	4b01      	ldr	r3, [pc, #4]	; (8002350 <__errno+0x8>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2000000c 	.word	0x2000000c

08002354 <__libc_init_array>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	4d0d      	ldr	r5, [pc, #52]	; (800238c <__libc_init_array+0x38>)
 8002358:	4c0d      	ldr	r4, [pc, #52]	; (8002390 <__libc_init_array+0x3c>)
 800235a:	1b64      	subs	r4, r4, r5
 800235c:	10a4      	asrs	r4, r4, #2
 800235e:	2600      	movs	r6, #0
 8002360:	42a6      	cmp	r6, r4
 8002362:	d109      	bne.n	8002378 <__libc_init_array+0x24>
 8002364:	4d0b      	ldr	r5, [pc, #44]	; (8002394 <__libc_init_array+0x40>)
 8002366:	4c0c      	ldr	r4, [pc, #48]	; (8002398 <__libc_init_array+0x44>)
 8002368:	f000 f8ce 	bl	8002508 <_init>
 800236c:	1b64      	subs	r4, r4, r5
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	2600      	movs	r6, #0
 8002372:	42a6      	cmp	r6, r4
 8002374:	d105      	bne.n	8002382 <__libc_init_array+0x2e>
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	f855 3b04 	ldr.w	r3, [r5], #4
 800237c:	4798      	blx	r3
 800237e:	3601      	adds	r6, #1
 8002380:	e7ee      	b.n	8002360 <__libc_init_array+0xc>
 8002382:	f855 3b04 	ldr.w	r3, [r5], #4
 8002386:	4798      	blx	r3
 8002388:	3601      	adds	r6, #1
 800238a:	e7f2      	b.n	8002372 <__libc_init_array+0x1e>
 800238c:	0800c548 	.word	0x0800c548
 8002390:	0800c548 	.word	0x0800c548
 8002394:	0800c548 	.word	0x0800c548
 8002398:	0800c54c 	.word	0x0800c54c

0800239c <memset>:
 800239c:	4402      	add	r2, r0
 800239e:	4603      	mov	r3, r0
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d100      	bne.n	80023a6 <memset+0xa>
 80023a4:	4770      	bx	lr
 80023a6:	f803 1b01 	strb.w	r1, [r3], #1
 80023aa:	e7f9      	b.n	80023a0 <memset+0x4>

080023ac <fmodf>:
 80023ac:	b508      	push	{r3, lr}
 80023ae:	ed2d 8b02 	vpush	{d8}
 80023b2:	eef0 8a40 	vmov.f32	s17, s0
 80023b6:	eeb0 8a60 	vmov.f32	s16, s1
 80023ba:	f000 f823 	bl	8002404 <__ieee754_fmodf>
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <fmodf+0x50>)
 80023c0:	f993 3000 	ldrsb.w	r3, [r3]
 80023c4:	3301      	adds	r3, #1
 80023c6:	d016      	beq.n	80023f6 <fmodf+0x4a>
 80023c8:	eeb4 8a48 	vcmp.f32	s16, s16
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	d611      	bvs.n	80023f6 <fmodf+0x4a>
 80023d2:	eef4 8a68 	vcmp.f32	s17, s17
 80023d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023da:	d60c      	bvs.n	80023f6 <fmodf+0x4a>
 80023dc:	eddf 8a08 	vldr	s17, [pc, #32]	; 8002400 <fmodf+0x54>
 80023e0:	eeb4 8a68 	vcmp.f32	s16, s17
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d105      	bne.n	80023f6 <fmodf+0x4a>
 80023ea:	f7ff ffad 	bl	8002348 <__errno>
 80023ee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80023f2:	2321      	movs	r3, #33	; 0x21
 80023f4:	6003      	str	r3, [r0, #0]
 80023f6:	ecbd 8b02 	vpop	{d8}
 80023fa:	bd08      	pop	{r3, pc}
 80023fc:	20000070 	.word	0x20000070
 8002400:	00000000 	.word	0x00000000

08002404 <__ieee754_fmodf>:
 8002404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002406:	ee10 6a90 	vmov	r6, s1
 800240a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800240e:	d009      	beq.n	8002424 <__ieee754_fmodf+0x20>
 8002410:	ee10 2a10 	vmov	r2, s0
 8002414:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8002418:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800241c:	da02      	bge.n	8002424 <__ieee754_fmodf+0x20>
 800241e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8002422:	dd04      	ble.n	800242e <__ieee754_fmodf+0x2a>
 8002424:	ee60 0a20 	vmul.f32	s1, s0, s1
 8002428:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800242c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800242e:	42ab      	cmp	r3, r5
 8002430:	dbfc      	blt.n	800242c <__ieee754_fmodf+0x28>
 8002432:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8002436:	d106      	bne.n	8002446 <__ieee754_fmodf+0x42>
 8002438:	4a32      	ldr	r2, [pc, #200]	; (8002504 <__ieee754_fmodf+0x100>)
 800243a:	0fe3      	lsrs	r3, r4, #31
 800243c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002440:	ed93 0a00 	vldr	s0, [r3]
 8002444:	e7f2      	b.n	800242c <__ieee754_fmodf+0x28>
 8002446:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800244a:	d13f      	bne.n	80024cc <__ieee754_fmodf+0xc8>
 800244c:	0219      	lsls	r1, r3, #8
 800244e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8002452:	2900      	cmp	r1, #0
 8002454:	dc37      	bgt.n	80024c6 <__ieee754_fmodf+0xc2>
 8002456:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800245a:	d13d      	bne.n	80024d8 <__ieee754_fmodf+0xd4>
 800245c:	022f      	lsls	r7, r5, #8
 800245e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8002462:	2f00      	cmp	r7, #0
 8002464:	da35      	bge.n	80024d2 <__ieee754_fmodf+0xce>
 8002466:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800246a:	bfbb      	ittet	lt
 800246c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8002470:	1a12      	sublt	r2, r2, r0
 8002472:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8002476:	4093      	lsllt	r3, r2
 8002478:	bfa8      	it	ge
 800247a:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800247e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8002482:	bfb5      	itete	lt
 8002484:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8002488:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800248c:	1a52      	sublt	r2, r2, r1
 800248e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8002492:	bfb8      	it	lt
 8002494:	4095      	lsllt	r5, r2
 8002496:	1a40      	subs	r0, r0, r1
 8002498:	1b5a      	subs	r2, r3, r5
 800249a:	bb00      	cbnz	r0, 80024de <__ieee754_fmodf+0xda>
 800249c:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80024a0:	bf38      	it	cc
 80024a2:	4613      	movcc	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0c7      	beq.n	8002438 <__ieee754_fmodf+0x34>
 80024a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024ac:	db1f      	blt.n	80024ee <__ieee754_fmodf+0xea>
 80024ae:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80024b2:	db1f      	blt.n	80024f4 <__ieee754_fmodf+0xf0>
 80024b4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80024b8:	317f      	adds	r1, #127	; 0x7f
 80024ba:	4323      	orrs	r3, r4
 80024bc:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80024c0:	ee00 3a10 	vmov	s0, r3
 80024c4:	e7b2      	b.n	800242c <__ieee754_fmodf+0x28>
 80024c6:	3801      	subs	r0, #1
 80024c8:	0049      	lsls	r1, r1, #1
 80024ca:	e7c2      	b.n	8002452 <__ieee754_fmodf+0x4e>
 80024cc:	15d8      	asrs	r0, r3, #23
 80024ce:	387f      	subs	r0, #127	; 0x7f
 80024d0:	e7c1      	b.n	8002456 <__ieee754_fmodf+0x52>
 80024d2:	3901      	subs	r1, #1
 80024d4:	007f      	lsls	r7, r7, #1
 80024d6:	e7c4      	b.n	8002462 <__ieee754_fmodf+0x5e>
 80024d8:	15e9      	asrs	r1, r5, #23
 80024da:	397f      	subs	r1, #127	; 0x7f
 80024dc:	e7c3      	b.n	8002466 <__ieee754_fmodf+0x62>
 80024de:	2a00      	cmp	r2, #0
 80024e0:	da02      	bge.n	80024e8 <__ieee754_fmodf+0xe4>
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	3801      	subs	r0, #1
 80024e6:	e7d7      	b.n	8002498 <__ieee754_fmodf+0x94>
 80024e8:	d0a6      	beq.n	8002438 <__ieee754_fmodf+0x34>
 80024ea:	0053      	lsls	r3, r2, #1
 80024ec:	e7fa      	b.n	80024e4 <__ieee754_fmodf+0xe0>
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	3901      	subs	r1, #1
 80024f2:	e7d9      	b.n	80024a8 <__ieee754_fmodf+0xa4>
 80024f4:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80024f8:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80024fc:	3182      	adds	r1, #130	; 0x82
 80024fe:	410b      	asrs	r3, r1
 8002500:	4323      	orrs	r3, r4
 8002502:	e7dd      	b.n	80024c0 <__ieee754_fmodf+0xbc>
 8002504:	0800c538 	.word	0x0800c538

08002508 <_init>:
 8002508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250a:	bf00      	nop
 800250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250e:	bc08      	pop	{r3}
 8002510:	469e      	mov	lr, r3
 8002512:	4770      	bx	lr

08002514 <_fini>:
 8002514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002516:	bf00      	nop
 8002518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251a:	bc08      	pop	{r3}
 800251c:	469e      	mov	lr, r3
 800251e:	4770      	bx	lr
